<?xml version="1.0" encoding="utf-8"?>
<ipxact:component xmlns:ipxact="http://www.accellera.org/XMLSchema/IPXACT/1685-2014" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:snps="http://www.synopsys.com/SPIRIT-snps" xsi:schemaLocation="http://www.accellera.org/XMLSchema/IPXACT/1685-2014 http://www.accellera.org/XMLSchema/IPXACT/1685-2014/index.xsd">
  <ipxact:vendor>Synopsys</ipxact:vendor>
  <ipxact:library>DesignWareLibrary</ipxact:library>
  <ipxact:name>DW_apb_i2c</ipxact:name>
  <ipxact:version>2.02a</ipxact:version>
  <ipxact:busInterfaces>
    <ipxact:busInterface>
      <ipxact:name>APB_Slave</ipxact:name>
      <ipxact:description>Bus slave side of the APB (Peripherals).
On this interface the 'consumer's are APB slaves,
and the 'provider' is the APB master.</ipxact:description>
      <ipxact:busType vendor="amba.com" library="busdef.amba.amba3" name="apb" version="r1p0"/>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="amba.com" library="busdef.amba.amba3" name="apb_rtl" version="r1p0"/>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>PRDATA</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>prdata</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>PADDR</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>paddr</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>PENABLE</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>penable</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>PSELx</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>psel</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>PWDATA</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>pwdata</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>PWRITE</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>pwrite</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave>
        <ipxact:memoryMapRef memoryMapRef="DW_apb_i2c_mem_map"/>
      </ipxact:slave>
      <ipxact:vendorExtensions>
        <snps:busInterface>
          <snps:attribute name="MemoryMap">DW_apb_i2c_mem_map</snps:attribute>
          <snps:interfaceParameter>
            <name>APB3</name>
            <snps:attribute name="InterfaceLink">&lt;open&gt;</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfaceParameter>
            <name>APB4</name>
            <snps:attribute name="InterfaceLink">SLAVE_INTERFACE_TYPE</snps:attribute>
            <snps:attribute name="AssociationFormula">@APB4?2:(@APB3?1:0)</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfaceParameter>
            <name>BigEndian</name>
            <snps:attribute name="InterfaceLink">&lt;open&gt;</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfaceParameter>
            <name>DataWidth</name>
            <snps:attribute name="InterfaceLink">APB_DATA_WIDTH</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfacePort>
            <name>PADDR</name>
            <snps:attribute name="BusAlignment">slice</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>PRDATA</name>
            <snps:attribute name="BusAlignment">right</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>PWDATA</name>
            <snps:attribute name="BusAlignment">right</snps:attribute>
          </snps:interfacePort>
        </snps:busInterface>
      </ipxact:vendorExtensions>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>PCLK</ipxact:name>
      <ipxact:description>Clock signal for APB slaves (peripherals).
Connections typically go from an exported interface to 
each APB master/slave.</ipxact:description>
      <ipxact:busType vendor="amba.com" library="busdef.amba.amba3" name="apb" version="r1p0"/>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="amba.com" library="busdef.amba.amba3" name="apb_rtl" version="r1p0"/>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>PCLK</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>pclk</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:system>
        <ipxact:group>APB_CLK</ipxact:group>
      </ipxact:system>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>PRESETn</ipxact:name>
      <ipxact:description>Reset signal for APB slaves (peripherals).
Connections typically go from an exported interface to 
each APB master/slave.</ipxact:description>
      <ipxact:busType vendor="amba.com" library="busdef.amba.amba3" name="apb" version="r1p0"/>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="amba.com" library="busdef.amba.amba3" name="apb_rtl" version="r1p0"/>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>PRESETn</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>presetn</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:system>
        <ipxact:group>APB_RESET</ipxact:group>
      </ipxact:system>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>ic_activity_intr</ipxact:name>
      <ipxact:description>Source interrupt signals connected to an interrupt controller.</ipxact:description>
      <ipxact:busType vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::Source-Interrupt" version="2.0"/>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::Source-Interrupt_rtl" version="2.0"/>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>irq</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ic_activity_intr</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:mirroredSlave/>
      <ipxact:vendorExtensions>
        <snps:busInterface>
          <snps:attribute name="MinConsumers">0</snps:attribute>
          <snps:interfaceParameter>
            <name>ActiveLevel</name>
            <snps:attribute name="InterfaceLink">IC_INTR_POL</snps:attribute>
            <snps:attribute name="Value">1</snps:attribute>
          </snps:interfaceParameter>
        </snps:busInterface>
      </ipxact:vendorExtensions>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>ic_gen_call_intr</ipxact:name>
      <ipxact:description>Source interrupt signals connected to an interrupt controller.</ipxact:description>
      <ipxact:busType vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::Source-Interrupt" version="2.0"/>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::Source-Interrupt_rtl" version="2.0"/>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>irq</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ic_gen_call_intr</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:mirroredSlave/>
      <ipxact:vendorExtensions>
        <snps:busInterface>
          <snps:attribute name="MinConsumers">0</snps:attribute>
          <snps:interfaceParameter>
            <name>ActiveLevel</name>
            <snps:attribute name="InterfaceLink">IC_INTR_POL</snps:attribute>
            <snps:attribute name="Value">1</snps:attribute>
          </snps:interfaceParameter>
        </snps:busInterface>
      </ipxact:vendorExtensions>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>ic_rd_req_intr</ipxact:name>
      <ipxact:description>Source interrupt signals connected to an interrupt controller.</ipxact:description>
      <ipxact:busType vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::Source-Interrupt" version="2.0"/>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::Source-Interrupt_rtl" version="2.0"/>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>irq</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ic_rd_req_intr</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:mirroredSlave/>
      <ipxact:vendorExtensions>
        <snps:busInterface>
          <snps:attribute name="MinConsumers">0</snps:attribute>
          <snps:interfaceParameter>
            <name>ActiveLevel</name>
            <snps:attribute name="InterfaceLink">IC_INTR_POL</snps:attribute>
            <snps:attribute name="Value">1</snps:attribute>
          </snps:interfaceParameter>
        </snps:busInterface>
      </ipxact:vendorExtensions>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>ic_rx_done_intr</ipxact:name>
      <ipxact:description>Source interrupt signals connected to an interrupt controller.</ipxact:description>
      <ipxact:busType vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::Source-Interrupt" version="2.0"/>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::Source-Interrupt_rtl" version="2.0"/>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>irq</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ic_rx_done_intr</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:mirroredSlave/>
      <ipxact:vendorExtensions>
        <snps:busInterface>
          <snps:attribute name="MinConsumers">0</snps:attribute>
          <snps:interfaceParameter>
            <name>ActiveLevel</name>
            <snps:attribute name="InterfaceLink">IC_INTR_POL</snps:attribute>
            <snps:attribute name="Value">1</snps:attribute>
          </snps:interfaceParameter>
        </snps:busInterface>
      </ipxact:vendorExtensions>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>ic_rx_full_intr</ipxact:name>
      <ipxact:description>Source interrupt signals connected to an interrupt controller.</ipxact:description>
      <ipxact:busType vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::Source-Interrupt" version="2.0"/>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::Source-Interrupt_rtl" version="2.0"/>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>irq</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ic_rx_full_intr</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:mirroredSlave/>
      <ipxact:vendorExtensions>
        <snps:busInterface>
          <snps:attribute name="MinConsumers">0</snps:attribute>
          <snps:interfaceParameter>
            <name>ActiveLevel</name>
            <snps:attribute name="InterfaceLink">IC_INTR_POL</snps:attribute>
            <snps:attribute name="Value">1</snps:attribute>
          </snps:interfaceParameter>
        </snps:busInterface>
      </ipxact:vendorExtensions>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>ic_rx_over_intr</ipxact:name>
      <ipxact:description>Source interrupt signals connected to an interrupt controller.</ipxact:description>
      <ipxact:busType vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::Source-Interrupt" version="2.0"/>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::Source-Interrupt_rtl" version="2.0"/>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>irq</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ic_rx_over_intr</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:mirroredSlave/>
      <ipxact:vendorExtensions>
        <snps:busInterface>
          <snps:attribute name="MinConsumers">0</snps:attribute>
          <snps:interfaceParameter>
            <name>ActiveLevel</name>
            <snps:attribute name="InterfaceLink">IC_INTR_POL</snps:attribute>
            <snps:attribute name="Value">1</snps:attribute>
          </snps:interfaceParameter>
        </snps:busInterface>
      </ipxact:vendorExtensions>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>ic_rx_under_intr</ipxact:name>
      <ipxact:description>Source interrupt signals connected to an interrupt controller.</ipxact:description>
      <ipxact:busType vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::Source-Interrupt" version="2.0"/>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::Source-Interrupt_rtl" version="2.0"/>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>irq</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ic_rx_under_intr</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:mirroredSlave/>
      <ipxact:vendorExtensions>
        <snps:busInterface>
          <snps:attribute name="MinConsumers">0</snps:attribute>
          <snps:interfaceParameter>
            <name>ActiveLevel</name>
            <snps:attribute name="InterfaceLink">IC_INTR_POL</snps:attribute>
            <snps:attribute name="Value">1</snps:attribute>
          </snps:interfaceParameter>
        </snps:busInterface>
      </ipxact:vendorExtensions>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>ic_start_det_intr</ipxact:name>
      <ipxact:description>Source interrupt signals connected to an interrupt controller.</ipxact:description>
      <ipxact:busType vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::Source-Interrupt" version="2.0"/>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::Source-Interrupt_rtl" version="2.0"/>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>irq</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ic_start_det_intr</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:mirroredSlave/>
      <ipxact:vendorExtensions>
        <snps:busInterface>
          <snps:attribute name="MinConsumers">0</snps:attribute>
          <snps:interfaceParameter>
            <name>ActiveLevel</name>
            <snps:attribute name="InterfaceLink">IC_INTR_POL</snps:attribute>
            <snps:attribute name="Value">1</snps:attribute>
          </snps:interfaceParameter>
        </snps:busInterface>
      </ipxact:vendorExtensions>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>ic_stop_det_intr</ipxact:name>
      <ipxact:description>Source interrupt signals connected to an interrupt controller.</ipxact:description>
      <ipxact:busType vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::Source-Interrupt" version="2.0"/>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::Source-Interrupt_rtl" version="2.0"/>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>irq</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ic_stop_det_intr</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:mirroredSlave/>
      <ipxact:vendorExtensions>
        <snps:busInterface>
          <snps:attribute name="MinConsumers">0</snps:attribute>
          <snps:interfaceParameter>
            <name>ActiveLevel</name>
            <snps:attribute name="InterfaceLink">IC_INTR_POL</snps:attribute>
            <snps:attribute name="Value">1</snps:attribute>
          </snps:interfaceParameter>
        </snps:busInterface>
      </ipxact:vendorExtensions>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>ic_tx_abrt_intr</ipxact:name>
      <ipxact:description>Source interrupt signals connected to an interrupt controller.</ipxact:description>
      <ipxact:busType vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::Source-Interrupt" version="2.0"/>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::Source-Interrupt_rtl" version="2.0"/>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>irq</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ic_tx_abrt_intr</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:mirroredSlave/>
      <ipxact:vendorExtensions>
        <snps:busInterface>
          <snps:attribute name="MinConsumers">0</snps:attribute>
          <snps:interfaceParameter>
            <name>ActiveLevel</name>
            <snps:attribute name="InterfaceLink">IC_INTR_POL</snps:attribute>
            <snps:attribute name="Value">1</snps:attribute>
          </snps:interfaceParameter>
        </snps:busInterface>
      </ipxact:vendorExtensions>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>ic_tx_empty_intr</ipxact:name>
      <ipxact:description>Source interrupt signals connected to an interrupt controller.</ipxact:description>
      <ipxact:busType vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::Source-Interrupt" version="2.0"/>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::Source-Interrupt_rtl" version="2.0"/>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>irq</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ic_tx_empty_intr</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:mirroredSlave/>
      <ipxact:vendorExtensions>
        <snps:busInterface>
          <snps:attribute name="MinConsumers">0</snps:attribute>
          <snps:interfaceParameter>
            <name>ActiveLevel</name>
            <snps:attribute name="InterfaceLink">IC_INTR_POL</snps:attribute>
            <snps:attribute name="Value">1</snps:attribute>
          </snps:interfaceParameter>
        </snps:busInterface>
      </ipxact:vendorExtensions>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>ic_tx_over_intr</ipxact:name>
      <ipxact:description>Source interrupt signals connected to an interrupt controller.</ipxact:description>
      <ipxact:busType vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::Source-Interrupt" version="2.0"/>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::Source-Interrupt_rtl" version="2.0"/>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>irq</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ic_tx_over_intr</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:mirroredSlave/>
      <ipxact:vendorExtensions>
        <snps:busInterface>
          <snps:attribute name="MinConsumers">0</snps:attribute>
          <snps:interfaceParameter>
            <name>ActiveLevel</name>
            <snps:attribute name="InterfaceLink">IC_INTR_POL</snps:attribute>
            <snps:attribute name="Value">1</snps:attribute>
          </snps:interfaceParameter>
        </snps:busInterface>
      </ipxact:vendorExtensions>
    </ipxact:busInterface>
  </ipxact:busInterfaces>
  <ipxact:memoryMaps>
    <ipxact:memoryMap>
      <ipxact:name>DW_apb_i2c_mem_map</ipxact:name>
      <ipxact:description>DW_apb_i2c memory map</ipxact:description>
      <ipxact:addressBlock>
        <ipxact:name>DW_apb_i2c_addr_block1</ipxact:name>
        <ipxact:description>DW_apb_i2c address block</ipxact:description>
        <ipxact:baseAddress>'h0</ipxact:baseAddress>
        <ipxact:range>'h400</ipxact:range>
        <ipxact:width>32</ipxact:width>
        <ipxact:register>
          <ipxact:name>IC_CON</ipxact:name>
          <ipxact:displayName>I2C Control Register</ipxact:displayName>
          <ipxact:description>I2C Control Register.
This register can be written only when the DW_apb_i2c
is disabled, which corresponds to the IC_ENABLE[0] register
being set to 0. Writes at other times have no effect.

Read/Write Access: 
  - If configuration parameter I2C_DYNAMIC_TAR_UPDATE=1, bit 4 is read only.
  - If configuration parameter IC_RX_FULL_HLD_BUS_EN =0, bit 9 is read only.
  - If configuration parameter IC_STOP_DET_IF_MASTER_ACTIVE =0, bit 10 is read only.
  - If configuration parameter IC_BUS_CLEAR_FEATURE=0, bit 11 is read only
  - If configuration parameter IC_OPTIONAL_SAR=0, bit 16 is read only
  - If configuration parameter IC_SMBUS=0, bit 17 is read only
  - If configuration parameter IC_SMBUS_ARP=0, bits 18 and 19 are read only.
</ipxact:description>
          <ipxact:addressOffset>'h0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>MASTER_MODE</ipxact:name>
            <ipxact:description>This bit controls whether the DW_apb_i2c master is enabled.


NOTE: Software should ensure that if this bit is written with '1'
then bit 6 should also be written with a '1'.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>Master mode is disabled</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>Master mode is enabled</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SPEED</ipxact:name>
            <ipxact:description>These bits control at which speed the DW_apb_i2c operates; its
setting is relevant only if one is operating the DW_apb_i2c in
master mode. Hardware protects against illegal values being
programmed by software. These bits must be programmed
appropriately for slave mode also, as it is used to capture
correct value of spike filter as per the speed mode. 

This register should be programmed only with a value in the range 
of 1 to IC_MAX_SPEED_MODE; otherwise, hardware updates this register with the value of
IC_MAX_SPEED_MODE.

1: standard mode (100 kbit/s)

2: fast mode (&lt;=400 kbit/s) or fast mode plus (&lt;=1000Kbit/s)

3: high speed mode (3.4 Mbit/s)

Note: This field is not applicable  when IC_ULTRA_FAST_MODE=1
</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h3</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>FAST</ipxact:name>
                <ipxact:displayName>Fast or Fast Plus mode of operation</ipxact:displayName>
                <ipxact:value>'h2</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>HIGH</ipxact:name>
                <ipxact:displayName>High Speed mode of operation</ipxact:displayName>
                <ipxact:value>'h3</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>STANDARD</ipxact:name>
                <ipxact:displayName>Standard Speed mode of operation</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>IC_10BITADDR_SLAVE</ipxact:name>
            <ipxact:description>When acting as a slave, this bit controls whether the DW_apb_i2c responds to 7- or 10-bit addresses.
 - 0: 7-bit addressing. The DW_apb_i2c ignores transactions that involve 10-bit addressing; for 7-bit addressing, only the lower 7 bits of the IC_SAR register are compared.
 - 1: 10-bit addressing. The DW_apb_i2c responds to only 10-bit addressing transfers that match the full 10 bits of the IC_SAR register.
</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ADDR_10BITS</ipxact:name>
                <ipxact:displayName>Slave 10Bit addressing</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ADDR_7BITS</ipxact:name>
                <ipxact:displayName>Slave  7Bit addressing</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>IC_10BITADDR_MASTER</ipxact:name>
            <ipxact:description>If the I2C_DYNAMIC_TAR_UPDATE configuration parameter is
set to 'No' (0), this bit is named IC_10BITADDR_MASTER and
controls whether the DW_apb_i2c starts its transfers in 7- or 10-bit
addressing mode when acting as a master.
If I2C_DYNAMIC_TAR_UPDATE is set to 'Yes' (1), the
function of this bit is handled by bit 12 of IC_TAR register, and
becomes a read-only copy called
IC_10BITADDR_MASTER_rd_only.
 - 0: 7-bit addressing
 - 1: 10-bit addressing
</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ADDR_10BITS</ipxact:name>
                <ipxact:displayName>Master 10Bit addressing mode</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ADDR_7BITS</ipxact:name>
                <ipxact:displayName>Master  7Bit addressing mode</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>IC_RESTART_EN</ipxact:name>
            <ipxact:description>Determines whether RESTART conditions may be sent when
acting as a master. Some older slaves do not support handling
RESTART conditions; however, RESTART conditions are used in
several DW_apb_i2c operations. When RESTART is disabled, the master is prohibited from
performing the following functions:
 - Sending a START BYTE
 - Performing any high-speed mode operation
 - High-speed mode operation
 - Performing direction changes in combined format mode
 - Performing a read operation with a 10-bit address
By replacing RESTART condition followed by a STOP and a
subsequent START condition, split operations are broken down
into multiple DW_apb_i2c transfers. If the above operations are
performed, it will result in setting bit 6 (TX_ABRT) of the
IC_RAW_INTR_STAT register.
.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>Master restart disabled</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>Master restart enabled</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>IC_SLAVE_DISABLE</ipxact:name>
            <ipxact:description>This bit controls whether I2C has its slave disabled,
which means once the presetn signal is applied, then
this bit takes on the value of the configuration parameter
IC_SLAVE_DISABLE. You have the choice of having the slave enabled
or disabled after reset is applied, which means software does not
have to configure the slave. By default, the slave is always enabled
(in reset state as well). If you need to disable it after reset, set
this bit to 1.

If this bit is set (slave is disabled), DW_apb_i2c functions only as
a master and does not perform any action that requires a slave.


NOTE: Software should ensure that if this bit is written with 0,
then bit 0 should also be written with a 0.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>SLAVE_DISABLED</ipxact:name>
                <ipxact:displayName>Slave mode is disabled</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>SLAVE_ENABLED</ipxact:name>
                <ipxact:displayName>Slave mode is enabled</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>STOP_DET_IFADDRESSED</ipxact:name>
            <ipxact:description>In slave mode:
 - 1'b1:  issues the STOP_DET interrrupt only when it is addressed.
 - 0'b0:  issues the STOP_DET irrespective of whether it's addressed or not.


NOTE: During a general call address, this slave does not issue the 
STOP_DET interrupt if STOP_DET_IF_ADDRESSED = 1'b1, even if
the slave responds to the general call address by generating ACK.
The STOP_DET interrupt is generated only when the transmitted
address matches the slave address (SAR).</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>slave issues STOP_DET intr always</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>slave issues STOP_DET intr only if addressed</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>TX_EMPTY_CTRL</ipxact:name>
            <ipxact:description>This bit controls the generation 
of the TX_EMPTY interrupt, as described in the IC_RAW_INTR_STAT register.
</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>Default behaviour of TX_EMPTY interrupt</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>Controlled generation of TX_EMPTY interrupt</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RX_FIFO_FULL_HLD_CTRL</ipxact:name>
            <ipxact:description>This bit controls whether 
DW_apb_i2c should hold the bus when the Rx FIFO is physically full to its RX_BUFFER_DEPTH,
as described in the IC_RX_FULL_HLD_BUS_EN parameter. 
</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>Overflow when RX_FIFO is full</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>Hold bus when RX_FIFO is full</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>STOP_DET_IF_MASTER_ACTIVE</ipxact:name>
            <ipxact:description>In Master mode:
 - 1'b1: issues the STOP_DET interrupt only when master is active.
 - 1'b0: issues the STOP_DET irrespective of whether master is active or not.
</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>Master issues the STOP_DET interrupt irrespective of whether master is active or not</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>Master issues the STOP_DET interrupt only when master is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_BUS_CLEAR_FEATURE_CTRL</ipxact:name>
            <ipxact:description>BUS_CLEAR_FEATURE_CTRL Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_CON_1</ipxact:name>
            <ipxact:description>IC_CON_1 Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_OPTIONAL_SAR_CTRL</ipxact:name>
            <ipxact:description>OPTIONAL_SAR_CTRL Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_SMBUS_SLAVE_QUICK_EN</ipxact:name>
            <ipxact:description>SMBUS_SLAVE_QUICK_EN Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_SMBUS_ARP_EN</ipxact:name>
            <ipxact:description>SMBUS_ARP_EN Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_SMBUS_PERSISTENT_SLV_ADDR_EN</ipxact:name>
            <ipxact:description>SMBUS_PERSISTENT_SLV_ADDR_EN Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_CON_2</ipxact:name>
            <ipxact:description>IC_CON_2 Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_TAR</ipxact:name>
          <ipxact:displayName>I2C Target Address Register</ipxact:displayName>
          <ipxact:description>I2C Target Address Register

If the configuration parameter I2C_DYNAMIC_TAR_UPDATE is set to 'No' (0),
this register is 12 bits wide, and bits 31:12 are reserved. This register
can be written to only when IC_ENABLE[0] is set to 0.

However, if I2C_DYNAMIC_TAR_UPDATE = 1, then the register becomes 13 bits wide.
In this case, writes to IC_TAR succeed when one of the following conditions are true:
 - DW_apb_i2c is NOT enabled (IC_ENABLE[0] is set to 0); or
 - DW_apb_i2c is enabled (IC_ENABLE[0]=1); AND DW_apb_i2c is NOT engaged in any Master (tx, rx) operation (IC_STATUS[5]=0); AND DW_apb_i2c is enabled to operate in Master mode (IC_CON[0]=1); AND there are NO entries in the TX FIFO (IC_STATUS[2]=1)
You can change the TAR address dynamically without losing the bus, only if the following conditions are met.
 - DW_apb_i2c is enabled (IC_ENABLE[0]=1); AND IC_EMPTYFIFO_HOLD_MASTER_EN configuration parameter is set to 1; AND DW_apb_i2c is enabled to operate in Master mode (IC_CON[0]=1); AND there are NO entries in the Tx FIFO and the master is in HOLD state (IC_INTR_STAT[13]=1).
 Note: If the software or application is aware that the DW_apb_i2c is not using the TAR address for the pending commands in the
    Tx FIFO, then it is possible to update the TAR address even while the Tx FIFO has entries (IC_STATUS[2]= 0).
  - It is not necessary to perform any write to this register if DW_apb_i2c is enabled as an I2C slave only.
</ipxact:description>
          <ipxact:addressOffset>'h4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>IC_TAR</ipxact:name>
            <ipxact:description>This is the target address for any master transaction. When
transmitting a General Call, these bits are ignored. To generate a
START BYTE, the CPU needs to write only once into these bits.

If the IC_TAR and IC_SAR are the same, loopback exists but the
FIFOs are shared between master and slave, so full loopback is
not feasible. Only one direction loopback mode is supported
(simplex), not duplex. A master cannot transmit to itself; it can
transmit to only a slave.

</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h33</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>10</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>GC_OR_START</ipxact:name>
            <ipxact:description>If bit 11 (SPECIAL) is set to 1 and bit 13(Device-ID) is set to 0, then this bit indicates whether a
General Call or START byte command is to be performed by the
DW_apb_i2c.
 - 0: General Call Address - after issuing a General Call, only writes may be performed. Attempting to issue a read command results in setting bit 6 (TX_ABRT) of the IC_RAW_INTR_STAT register. The DW_apb_i2c remains in General Call mode until the SPECIAL bit value (bit 11) is cleared.
 - 1: START BYTE
</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>GENERAL_CALL</ipxact:name>
                <ipxact:displayName>GENERAL_CALL byte transmission</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>START_BYTE</ipxact:name>
                <ipxact:displayName>START byte transmission</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SPECIAL</ipxact:name>
            <ipxact:description>This bit indicates whether software performs a Device-ID or General Call or
START BYTE command.
 - 0: ignore bit 10 GC_OR_START and use IC_TAR normally
 - 1: perform special I2C command as specified in Device_ID or GC_OR_START bit
</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>Disables programming of GENERAL_CALL or START_BYTE transmission</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>Enables  programming of GENERAL_CALL or START_BYTE transmission</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_10BITADDR_MASTER</ipxact:name>
            <ipxact:description>IC_10BITADDR_MASTER Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_DEVICE_ID</ipxact:name>
            <ipxact:description>DEVICE_ID Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_TAR_1</ipxact:name>
            <ipxact:description>IC_TAR_1 Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>14</ipxact:bitOffset>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_SMBUS_QUICK_CMD</ipxact:name>
            <ipxact:description>SMBUS_QUICK_CMD Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_TAR_2</ipxact:name>
            <ipxact:description>IC_TAR_2 Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:bitWidth>15</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:vendorExtensions>
            <snps:register>
              <snps:attribute name="PingTestMask">00000000000000000000111111111111</snps:attribute>
              <snps:attribute name="SideEffects">0</snps:attribute>
            </snps:register>
          </ipxact:vendorExtensions>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_SAR</ipxact:name>
          <ipxact:displayName>I2C Slave Address Register</ipxact:displayName>
          <ipxact:description>I2C Slave Address Register</ipxact:description>
          <ipxact:addressOffset>'h8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>IC_SAR</ipxact:name>
            <ipxact:description>The IC_SAR holds the slave address when the I2C is operating as a slave. For 7-bit
addressing, only IC_SAR[6:0] is used.

This register can be written only when the I2C interface is disabled, which
corresponds to the IC_ENABLE[0] register being set to 0. Writes at other times have
no effect.

Note: 
The default values cannot be any of the reserved address locations:
that is, 0x00 to 0x07, or 0x78 to 0x7f. The correct operation of the
device is not guaranteed if you program the IC_SAR or IC_TAR to
a reserved value. Refer to Table "I2C/SMBus Definition of Bits in First Byte" for a complete list of these reserved values.

</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h33</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>10</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_SAR</ipxact:name>
            <ipxact:description>IC_SAR Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:bitWidth>22</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_HS_MADDR</ipxact:name>
          <ipxact:displayName>I2C High Speed Master Mode Code Address Register</ipxact:displayName>
          <ipxact:description>I2C High Speed Master Mode Code Address Register</ipxact:description>
          <ipxact:addressOffset>'hc</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>IC_HS_MAR</ipxact:name>
            <ipxact:description>This bit field holds the value of the I2C HS mode master code. HS-mode
master codes are reserved 8-bit codes (00001xxx) that are not used for slave
addressing or other purposes. Each master has its unique master code; up to
eight high-speed mode masters can be present on the same I2C bus system.
Valid values are from 0 to 7. This register goes away and becomes read-only
returning 0's if the IC_MAX_SPEED_MODE configuration parameter is set
to either Standard (1) or Fast (2).

This register can be written only when the I2C interface is disabled, which
corresponds to the IC_ENABLE[0] register being set to 0. Writes at other times
have no effect.

</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_HS_MAR</ipxact:name>
            <ipxact:description>IC_HS_MAR Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:bitWidth>29</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_DATA_CMD</ipxact:name>
          <ipxact:displayName>I2C Rx/Tx Data Buffer and Command Register</ipxact:displayName>
          <ipxact:description>I2C Rx/Tx Data Buffer and Command Register; this is the register the CPU writes to when filling the TX FIFO and the CPU reads from when retrieving bytes from RX FIFO.

The size of the register changes as follows:

Write:
 - 11 bits when IC_EMPTYFIFO_HOLD_MASTER_EN=1
 - 9 bits when IC_EMPTYFIFO_HOLD_MASTER_EN=0
Read:
 - 12 bits when IC_FIRST_DATA_BYTE_STATUS = 1
 - 8 bits when IC_FIRST_DATA_BYTE_STATUS = 0
Note: In order for the DW_apb_i2c to continue acknowledging reads, a read command should be
written for every byte that is to be received; otherwise the DW_apb_i2c will stop
acknowledging.</ipxact:description>
          <ipxact:addressOffset>'h10</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>true</ipxact:volatile>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>DAT</ipxact:name>
            <ipxact:description>This register contains the data to be transmitted or received on the I2C bus.
If you are writing to this register and want to perform a read,
bits 7:0 (DAT) are ignored by the DW_apb_i2c. However, when you read
this register, these bits return the value of data received on the
DW_apb_i2c interface.

</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>CMD</ipxact:name>
            <ipxact:description>This bit controls whether a read or a write is performed.
This bit does not control the direction when the DW_apb_i2c
acts as a slave. It controls only the direction
when it acts as a master.

When a command is entered in the TX FIFO, this bit distinguishes the write
and read commands. In slave-receiver mode, this bit is a "don't care"
because writes to this register are not required. In slave-transmitter mode, a
"0" indicates that the data in IC_DATA_CMD is to be transmitted.

When programming this bit, you should remember the following: attempting
to perform a read operation after a General Call command has been sent
results in a TX_ABRT interrupt (bit 6 of the IC_RAW_INTR_STAT register),
unless bit 11 (SPECIAL) in the IC_TAR register has been cleared.
If a "1" is written to this bit after receiving a RD_REQ interrupt, then a
TX_ABRT interrupt occurs.

</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>write-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>READ</ipxact:name>
                <ipxact:displayName>Master Read  Command</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>WRITE</ipxact:name>
                <ipxact:displayName>Master Write Command</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_STOP</ipxact:name>
            <ipxact:description>STOP Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_RESTART</ipxact:name>
            <ipxact:description>RESTART Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_FIRST_DATA_BYTE</ipxact:name>
            <ipxact:description>FIRST_DATA_BYTE Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_DATA_CMD</ipxact:name>
            <ipxact:description>IC_DATA_CMD Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:bitWidth>20</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_SS_SCL_HCNT</ipxact:name>
          <ipxact:displayName>Standard Speed I2C Clock SCL High Count Register</ipxact:displayName>
          <ipxact:description>Standard Speed I2C Clock SCL High Count Register</ipxact:description>
          <ipxact:addressOffset>'h14</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>IC_SS_SCL_HCNT</ipxact:name>
            <ipxact:description>This register must be set before any I2C bus transaction can take place to
ensure proper I/O timing. This register sets the SCL clock high-period
count for standard speed. For more information, refer to "IC_CLK Frequency Configuration".
  
This register can be written only when the I2C interface is disabled which
corresponds to the IC_ENABLE[0] register being set to 0. Writes at other
times have no effect.

The minimum valid value is 6; hardware prevents values less than this
being written, and if attempted results in 6 being set. For designs with
APB_DATA_WIDTH = 8, the order of programming is important to ensure
the correct operation of the DW_apb_i2c. The lower byte must be
programmed first. Then the upper byte is programmed.

When the configuration parameter IC_HC_COUNT_VALUES is set to 1,
this register is read only.

NOTE: This register must not be programmed to a value higher than
65525, because DW_apb_i2c uses a 16-bit counter to flag an I2C bus idle
condition when this counter reaches a value of IC_SS_SCL_HCNT + 10.

</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h190</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_SS_SCL_HIGH_COUNT</ipxact:name>
            <ipxact:description>IC_SS_SCL_HCNT Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:vendorExtensions>
            <snps:register>
              <snps:attribute name="PingTestMask">1111111111111111</snps:attribute>
              <snps:attribute name="SideEffects">0</snps:attribute>
            </snps:register>
          </ipxact:vendorExtensions>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_SS_SCL_LCNT</ipxact:name>
          <ipxact:displayName>Standard Speed I2C Clock SCL Low Count Register</ipxact:displayName>
          <ipxact:description>Standard Speed I2C Clock SCL Low Count Register</ipxact:description>
          <ipxact:addressOffset>'h18</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>IC_SS_SCL_LCNT</ipxact:name>
            <ipxact:description>This register must be set before any I2C bus transaction can take place to
ensure proper I/O timing. This register sets the SCL clock low period
count for standard speed. For more information, refer to "IC_CLK Frequency Configuration"

This register can be written only when the I2C interface is disabled which
corresponds to the IC_ENABLE[0] register being set to 0. Writes at other
times have no effect.

The minimum valid value is 8; hardware prevents values less than this
being written, and if attempted, results in 8 being set. For designs with
APB_DATA_WIDTH = 8, the order of programming is important to
ensure the correct operation of DW_apb_i2c. The lower byte must be
programmed first, and then the upper byte is programmed.

When the configuration parameter IC_HC_COUNT_VALUES is set to 1,
this register is read only.

</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1d6</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_SS_SCL_LOW_COUNT</ipxact:name>
            <ipxact:description>RSVD_IC_SS_SCL_LOW_COUNT Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_FS_SCL_HCNT</ipxact:name>
          <ipxact:displayName>Fast Mode or Fast Mode Plus I2C Clock SCL High Count Register</ipxact:displayName>
          <ipxact:description>Fast Mode or Fast Mode Plus I2C Clock SCL High Count Register</ipxact:description>
          <ipxact:addressOffset>'h1c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>IC_FS_SCL_HCNT</ipxact:name>
            <ipxact:description>This register must be set before any I2C bus transaction can take place to
ensure proper I/O timing. This register sets the SCL clock high-period
count for fast mode or fast mode plus. It is used in high-speed mode to send the Master Code
and START BYTE or General CALL. For more information, refer
to "IC_CLK Frequency Configuration".

This register goes away and becomes read-only returning 0s if
IC_MAX_SPEED_MODE = standard. 
This register can be written only
when the I2C interface is disabled, which corresponds to the IC_ENABLE[0]
register being set to 0. Writes at other times have no effect.

The minimum valid value is 6; hardware prevents values less than this
being written, and if attempted results in 6 being set. For designs with
APB_DATA_WIDTH == 8 the order of programming is important to
ensure the correct operation of the DW_apb_i2c. The lower byte must be
programmed first. Then the upper byte is programmed.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h3c</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_FS_SCL_HCNT</ipxact:name>
            <ipxact:description>IC_FS_SCL_HCNT Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_FS_SCL_LCNT</ipxact:name>
          <ipxact:displayName>Fast Mode or Fast Mode Plus I2C Clock SCL Low Count Register</ipxact:displayName>
          <ipxact:description>Fast Mode or Fast Mode Plus I2C Clock SCL Low Count Register</ipxact:description>
          <ipxact:addressOffset>'h20</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>IC_FS_SCL_LCNT</ipxact:name>
            <ipxact:description>This register must be set before any I2C bus transaction can take place to
ensure proper I/O timing. This register sets the SCL clock low period count
for fast speed. It is used in high-speed mode to send the Master Code and
START BYTE or General CALL. For more information, refer
to "IC_CLK Frequency Configuration".

This register goes away and becomes read-only returning 0s if
IC_MAX_SPEED_MODE = standard.

This register can be written only when the I2C interface is disabled, which
corresponds to the IC_ENABLE[0] register being set to 0. Writes at other times
have no effect.

The minimum valid value is 8; hardware prevents values less than this
being written, and if attempted results in 8 being set. For designs with
APB_DATA_WIDTH = 8 the order of programming is important to ensure
the correct operation of the DW_apb_i2c. The lower byte must be
programmed first. Then the upper byte is programmed. If the value is less
than 8 then the count value gets changed to 8.

When the configuration parameter IC_HC_COUNT_VALUES is set to 1,
this register is read only.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h82</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_FS_SCL_LCNT</ipxact:name>
            <ipxact:description>IC_FS_SCL_LCNT Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_HS_SCL_HCNT</ipxact:name>
          <ipxact:displayName>High Speed I2C Clock SCL High Count Register</ipxact:displayName>
          <ipxact:description>High Speed I2C Clock SCL High Count Register</ipxact:description>
          <ipxact:addressOffset>'h24</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>IC_HS_SCL_HCNT</ipxact:name>
            <ipxact:description>This register must be set before any I2C bus transaction can take place to
ensure proper I/O timing. This register sets the SCL clock high period
count for high speed.refer to "IC_CLK Frequency Configuration". 

The SCL High time depends on the loading of the bus. For 100pF loading,
the SCL High time is 60ns; for 400pF loading, the SCL High time is
120ns.
This register goes away and becomes read-only returning 0s if
IC_MAX_SPEED_MODE != high.

This register can be written only when the I2C interface is disabled, which
corresponds to the IC_ENABLE[0] register being set to 0. Writes at other
times have no effect.

The minimum valid value is 6; hardware prevents values less than this
being written, and if attempted results in 6 being set. For designs with
APB_DATA_WIDTH = 8 the order of programming is important to
ensure the correct operation of the DW_apb_i2c. The lower byte must be
programmed first. Then the upper byte is programmed.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h6</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_HS_SCL_HCNT</ipxact:name>
            <ipxact:description>IC_HS_SCL_HCNT Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_HS_SCL_LCNT</ipxact:name>
          <ipxact:displayName>High Speed I2C Clock SCL Low Count Register</ipxact:displayName>
          <ipxact:description>High Speed I2C Clock SCL Low Count Register</ipxact:description>
          <ipxact:addressOffset>'h28</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>IC_HS_SCL_LCNT</ipxact:name>
            <ipxact:description>This register must be set before any I2C bus transaction can take place to
ensure proper I/O timing. This register sets the SCL clock low period count
for high speed. For more information, refer to "IC_CLK Frequency Configuration". 
 
The SCL low time depends on the loading of the bus. For 100pF loading,
the SCL low time is 160ns; for 400pF loading, the SCL low time is 320ns.
This register goes away and becomes read-only returning 0s if
IC_MAX_SPEED_MODE != high.

This register can be written only when the I2C interface is disabled, which
corresponds to the IC_ENABLE[0] register being set to 0. Writes at other
times have no effect.

The minimum valid value is 8; hardware prevents values less than this
being written, and if attempted results in 8 being set. For designs with
APB_DATA_WIDTH == 8 the order of programming is important to
ensure the correct operation of the DW_apb_i2c. The lower byte must be
programmed first. Then the upper byte is programmed. If the value is less
than 8 then the count value gets changed to 8.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h10</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_HS_SCL_LOW_CNT</ipxact:name>
            <ipxact:description>IC_HS_SCL_LCNT Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_INTR_STAT</ipxact:name>
          <ipxact:displayName>I2C Interrupt Status Register</ipxact:displayName>
          <ipxact:description>I2C Interrupt Status Register

Each bit in this register has a corresponding mask bit
in the IC_INTR_MASK register. These bits are cleared by reading the matching
interrupt clear register. The unmasked raw versions of these bits are
available in the IC_RAW_INTR_STAT register.</ipxact:description>
          <ipxact:addressOffset>'h2c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>true</ipxact:volatile>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>R_RX_UNDER</ipxact:name>
            <ipxact:description>
See IC_RAW_INTR_STAT for a detailed description of R_RX_UNDER bit.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>RX_UNDER interrupt is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>RX_UNDER interrupt is inactive</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>R_RX_OVER</ipxact:name>
            <ipxact:description>
See IC_RAW_INTR_STAT for a detailed description of R_RX_OVER bit.
</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>R_RX_OVER interrupt is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>R_RX_OVER interrupt is inactive</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>R_RX_FULL</ipxact:name>
            <ipxact:description>
See IC_RAW_INTR_STAT for a detailed description of R_RX_FULL bit.
</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>R_RX_FULL interrupt is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>R_RX_FULL interrupt is inactive</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>R_TX_OVER</ipxact:name>
            <ipxact:description>
See IC_RAW_INTR_STAT for a detailed description of R_TX_OVER bit.
</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>R_TX_OVER interrupt is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>R_TX_OVER interrupt is inactive</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>R_TX_EMPTY</ipxact:name>
            <ipxact:description>
See IC_RAW_INTR_STAT for a detailed description of R_TX_EMPTY bit.
</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>R_TX_EMPTY interrupt is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>R_TX_EMPTY interrupt is inactive</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>R_RD_REQ</ipxact:name>
            <ipxact:description>
See IC_RAW_INTR_STAT for a detailed description of R_RD_REQ bit.
</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>R_RD_REQ interrupt is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>R_RD_REQ interrupt is inactive</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>R_TX_ABRT</ipxact:name>
            <ipxact:description>
See IC_RAW_INTR_STAT for a detailed description of R_TX_ABRT bit.
</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>R_TX_ABRT interrupt is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>R_TX_ABRT interrupt is inactive</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>R_RX_DONE</ipxact:name>
            <ipxact:description>
See IC_RAW_INTR_STAT for a detailed description of R_RX_DONE bit.
</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>R_RX_DONE interrupt is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>R_RX_DONE interrupt is inactive</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>R_ACTIVITY</ipxact:name>
            <ipxact:description>
See IC_RAW_INTR_STAT for a detailed description of R_ACTIVITY bit.
</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>R_ACTIVITY interrupt is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>R_ACTIVITY interrupt is inactive</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>R_STOP_DET</ipxact:name>
            <ipxact:description>
See IC_RAW_INTR_STAT for a detailed description of R_STOP_DET bit.
</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>R_STOP_DET interrupt is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>R_STOP_DET interrupt is inactive</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>R_START_DET</ipxact:name>
            <ipxact:description>
See IC_RAW_INTR_STAT for a detailed description of R_START_DET bit.
</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>R_START_DET interrupt is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>R_START_DET interrupt is inactive</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>R_GEN_CALL</ipxact:name>
            <ipxact:description>
See IC_RAW_INTR_STAT for a detailed description of R_GEN_CALL bit.
</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>R_GEN_CALL interrupt is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>R_GEN_CALL interrupt is inactive</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>R_RESTART_DET</ipxact:name>
            <ipxact:description>
See IC_RAW_INTR_STAT for a detailed description of R_RESTART_DET bit.
</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>R_RESTART_DET interrupt is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>R_RESTART_DET interrupt is inactive</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>R_MASTER_ON_HOLD</ipxact:name>
            <ipxact:description>
See IC_RAW_INTR_STAT for a detailed description of R_MASTER_ON_HOLD bit.
</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>R_MASTER_ON_HOLD interrupt is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>R_MASTER_ON_HOLD interrupt is inactive</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_R_SCL_STUCK_AT_LOW</ipxact:name>
            <ipxact:description>R_SCL_STUCK_AT_LOW Register field Reserved bits - Read Only
</ipxact:description>
            <ipxact:bitOffset>14</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>R_SCL_STUCK_AT_LOW interrupt is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>R_SCL_STUCK_AT_LOW interrupt is inactive</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_INTR_STAT</ipxact:name>
            <ipxact:description>IC_INTR_STAT Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:bitWidth>17</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_INTR_MASK</ipxact:name>
          <ipxact:displayName>I2C Interrupt Mask Register</ipxact:displayName>
          <ipxact:description>I2C Interrupt Mask Register.

These bits mask their corresponding interrupt status bits. This register is active low; 
a value of 0 masks the interrupt, whereas a value of 1 unmasks the interrupt.
</ipxact:description>
          <ipxact:addressOffset>'h30</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>M_RX_UNDER</ipxact:name>
            <ipxact:description>This bit masks the R_RX_UNDER interrupt in IC_INTR_STAT register.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>RX_UNDER interrupt is unmasked</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>RX_UNDER interrupt is masked</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>M_RX_OVER</ipxact:name>
            <ipxact:description>This bit masks the R_RX_OVER interrupt in IC_INTR_STAT register.
</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>RX_OVER interrupt is unmasked</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>RX_OVER interrupt is   masked</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>M_RX_FULL</ipxact:name>
            <ipxact:description>This bit masks the R_RX_FULL interrupt in IC_INTR_STAT register.
</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>RX_FULL interrupt is unmasked</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>RX_FULL interrupt is   masked</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>M_TX_OVER</ipxact:name>
            <ipxact:description>This bit masks the R_TX_OVER interrupt in IC_INTR_STAT register.
</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>TX_OVER interrupt is unmasked</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>TX_OVER interrupt is   masked</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>M_TX_EMPTY</ipxact:name>
            <ipxact:description>This bit masks the R_TX_EMPTY interrupt in IC_INTR_STAT register.
</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>TX_EMPTY interrupt is unmasked</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>TX_EMPTY interrupt is   masked</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>M_RD_REQ</ipxact:name>
            <ipxact:description>This bit masks the R_RD_REQ interrupt in IC_INTR_STAT register.
</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>RD_REQ interrupt is unmasked</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>RD_REQ interrupt is   masked</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>M_TX_ABRT</ipxact:name>
            <ipxact:description>This bit masks the R_TX_ABRT interrupt in IC_INTR_STAT register.
</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>TX_ABORT interrupt is unmasked</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>TX_ABORT interrupt is   masked</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>M_RX_DONE</ipxact:name>
            <ipxact:description>This bit masks the R_RX_DONE interrupt in IC_INTR_STAT register.
</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>RX_DONE interrupt is unmasked</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>RX_DONE interrupt is   masked</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>M_ACTIVITY</ipxact:name>
            <ipxact:description>This bit masks the R_ACTIVITY interrupt in IC_INTR_STAT register.
</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>ACTIVITY interrupt is unmasked</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>ACTIVITY interrupt is   masked</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>M_STOP_DET</ipxact:name>
            <ipxact:description>This bit masks the R_STOP_DET interrupt in IC_INTR_STAT register.
</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>STOP_DET interrupt is unmasked</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>STOP_DET interrupt is   masked</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>M_START_DET</ipxact:name>
            <ipxact:description>This bit masks the R_START_DET interrupt in IC_INTR_STAT register.
</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>START_DET interrupt is unmasked</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>START_DET interrupt is   masked</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>M_GEN_CALL</ipxact:name>
            <ipxact:description>This bit masks the R_GEN_CALL interrupt in IC_INTR_STAT register.
</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>GEN_CALL interrupt is unmasked</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>GEN_CALL interrupt is   masked</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>M_RESTART_DET_read_only</ipxact:name>
            <ipxact:description>This M_RESTART_DET_read_only bit masks the R_RESTART_DET interrupt in IC_INTR_STAT register.
</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>RESTART_DET interrupt is unmasked</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>RESTART_DET interrupt is   masked</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>M_MASTER_ON_HOLD_read_only</ipxact:name>
            <ipxact:description>This M_MASTER_ON_HOLD_read_only bit masks the R_MASTER_ON_HOLD interrupt in IC_INTR_STAT register.
</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>MASTER_ON_HOLD interrupt is unmasked</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>MASTER_ON_HOLD interrupt is   masked</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_M_SCL_STUCK_AT_LOW</ipxact:name>
            <ipxact:description>M_SCL_STUCK_AT_LOW Register field Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>14</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_INTR_STAT</ipxact:name>
            <ipxact:description>IC_INTR_STAT Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:bitWidth>17</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_RAW_INTR_STAT</ipxact:name>
          <ipxact:displayName>I2C Raw Interrupt Status Register</ipxact:displayName>
          <ipxact:description>I2C Raw Interrupt Status Register

Unlike the IC_INTR_STAT register, these bits are not masked so they
always show the true status of the DW_apb_i2c.</ipxact:description>
          <ipxact:addressOffset>'h34</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>true</ipxact:volatile>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>RX_UNDER</ipxact:name>
            <ipxact:description>Set if the processor attempts to read the receive buffer when it is empty by
reading from the IC_DATA_CMD register. If the module is disabled
(IC_ENABLE[0]=0), this bit keeps its level until the master or slave state
machines go into idle, and when ic_en goes to 0, this interrupt is cleared.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>RX_UNDER interrupt is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>RX_UNDER interrupt is inactive</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RX_OVER</ipxact:name>
            <ipxact:description>Set if the receive buffer is completely filled to IC_RX_BUFFER_DEPTH and
an additional byte is received from an external I2C device. The DW_apb_i2c
acknowledges this, but any data bytes received after the FIFO is full are lost. If
the module is disabled (IC_ENABLE[0]=0), this bit keeps its level until the
master or slave state machines go into idle, and when ic_en goes to 0, this
interrupt is cleared.

Note:  If the configuration parameter IC_RX_FULL_HLD_BUS_EN is enabled
and bit 9 of the IC_CON register (RX_FIFO_FULL_HLD_CTRL) is
programmed to HIGH, then the RX_OVER interrupt never occurs, because the
Rx FIFO never overflows.
</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>RX_OVER interrupt is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>RX_OVER interrupt is inactive</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RX_FULL</ipxact:name>
            <ipxact:description>Set when the receive buffer reaches or goes above the RX_TL threshold in the
IC_RX_TL register. It is automatically cleared by hardware when buffer level
goes below the threshold. If the module is disabled (IC_ENABLE[0]=0), the
RX FIFO is flushed and held in reset; therefore the RX FIFO is not full. So this
bit is cleared once the IC_ENABLE bit 0 is programmed with a 0, regardless of
the activity that continues.
</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>RX_FULL interrupt is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>RX_FULL interrupt is inactive</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>TX_OVER</ipxact:name>
            <ipxact:description>Set during transmit if the transmit buffer is filled to IC_TX_BUFFER_DEPTH
and the processor attempts to issue another I2C command by writing to the
IC_DATA_CMD register. When the module is disabled, this bit keeps its level
until the master or slave state machines go into idle, and when ic_en goes to 0,
this interrupt is cleared.
</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>TX_OVER interrupt is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>TX_OVER interrupt is inactive</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>TX_EMPTY</ipxact:name>
            <ipxact:description>The behavior of the TX_EMPTY interrupt status 
differs based on the TX_EMPTY_CTRL selection in the IC_CON register.
 - When TX_EMPTY_CTRL = 0:
This bit is set to 1 when the transmit buffer is at or below the threshold value set in the IC_TX_TL register.
 - When TX_EMPTY_CTRL = 1:
This bit is set to 1 when the transmit buffer is at or below the threshold value set in the IC_TX_TL register and the transmission of the address/data from the internal shift register for the most recently popped command is completed.
It is automatically cleared by hardware when the buffer level goes above the
threshold. When IC_ENABLE[0] is set to 0, the TX FIFO is flushed and held in
reset. There the TX FIFO looks like it has no data within it, so this bit is set to 1,
provided there is activity in the master or slave state machines. When there is no
longer any activity, then with ic_en=0, this bit is set to 0.
</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>TX_EMPTY interrupt is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>TX_EMPTY interrupt is inactive</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RD_REQ</ipxact:name>
            <ipxact:description>This bit is set to 1 when DW_apb_i2c is acting as a slave and another I2C
master is attempting to read data from DW_apb_i2c. The DW_apb_i2c holds
the I2C bus in a wait state (SCL=0) until this interrupt is serviced, which means
that the slave has been addressed by a remote master that is asking for data to
be transferred. The processor must respond to this interrupt and then write the
requested data to the IC_DATA_CMD register. This bit is set to 0 just after the
processor reads the IC_CLR_RD_REQ register.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>RD_REQ interrupt is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>RD_REQ interrupt is inactive</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>TX_ABRT</ipxact:name>
            <ipxact:description>This bit indicates if DW_apb_i2c, as an I2C transmitter,
is unable to complete the intended actions on the
contents of the transmit FIFO. This situation can
occur both as an I2C master or an I2C slave, and is
referred to as a 'transmit abort'.
When this bit is set to 1, the IC_TX_ABRT_SOURCE register
indicates the reason why the transmit abort takes places.

Note:  The DW_apb_i2c flushes/resets/empties only the TX_FIFO whenever
there is a transmit abort caused by any of the events tracked by the
IC_TX_ABRT_SOURCE register. The Tx FIFO remains in this flushed state
until the register IC_CLR_TX_ABRT is read. Once this read is performed, the
Tx FIFO is then ready to accept more data bytes from the APB interface. RX
FIFO flush because of TX_ABRT is controlled by the coreConsultant parameter IC_AVOID_RX_FIFO_FLUSH_ON_TX_ABRT.
</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>TX_ABRT interrupt is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>TX_ABRT interrupt is inactive</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RX_DONE</ipxact:name>
            <ipxact:description>When the DW_apb_i2c is acting as a slave-transmitter,
this bit is set to 1 if the master does not acknowledge
a transmitted byte. This occurs on the last byte of
the transmission, indicating that the transmission is done.
</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>RX_DONE interrupt is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>RX_DONE interrupt is inactive</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ACTIVITY</ipxact:name>
            <ipxact:description>This bit captures DW_apb_i2c activity and stays set until it is cleared. There
are four ways to clear it:
 - Disabling the DW_apb_i2c
 - Reading the IC_CLR_ACTIVITY register
 - Reading the IC_CLR_INTR register
 - System reset
Once this bit is set, it stays set unless one of the four methods is used to clear it. Even if the DW_apb_i2c module is idle, this bit remains set until cleared, indicating that there was activity on the bus.
</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>RAW_INTR_ACTIVITY interrupt is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>RAW_INTR_ACTIVITY interrupt is inactive</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>STOP_DET</ipxact:name>
            <ipxact:description>Indicates whether a STOP condition has occurred on the I2C interface regardless of whether DW_apb_i2c is operating in slave or master mode.

In Slave Mode:
 - If IC_CON[7]=1'b1  (STOP_DET_IFADDRESSED), the STOP_DET interrupt will be issued only if slave is addressed.
Note: During a general call address, this slave does not issue a STOP_DET interrupt if STOP_DET_IF_ADDRESSED=1'b1, even if the slave responds to the general call address by generating ACK. The STOP_DET interrupt is generated only when the transmitted address matches the slave address (SAR).
 - If IC_CON[7]=1'b0 (STOP_DET_IFADDRESSED), the STOP_DET interrupt is issued irrespective of whether it is being addressed.
In Master Mode:
 - If IC_CON[10]=1'b1  (STOP_DET_IF_MASTER_ACTIVE),the STOP_DET interrupt will be issued only if Master is active.
 - If IC_CON[10]=1'b0  (STOP_DET_IFADDRESSED),the STOP_DET interrupt will be issued irrespective of whether master is active or not.
</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>STOP_DET interrupt is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>STOP_DET interrupt is inactive</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>START_DET</ipxact:name>
            <ipxact:description>Indicates whether a START or RESTART condition has occurred on the I2C
interface regardless of whether DW_apb_i2c is operating in slave or master
mode.
</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>START_DET interrupt is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>START_DET interrupt is inactive</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>GEN_CALL</ipxact:name>
            <ipxact:description>Set only when a General Call address is received and it is acknowledged. It
stays set until it is cleared either by disabling DW_apb_i2c or when the CPU
reads bit 0 of the IC_CLR_GEN_CALL register. DW_apb_i2c stores the
received data in the Rx buffer.
</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>GEN_CALL interrupt is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>GEN_CALL interrupt is inactive</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RESTART_DET</ipxact:name>
            <ipxact:description>Indicates whether a RESTART condition has occurred on the I2C interface 
when DW_apb_i2c is operating in Slave mode and the slave is being addressed.
 Enabled only when IC_SLV_RESTART_DET_EN=1.

Note: However, in high-speed mode or during a START BYTE transfer, the RESTART comes before the address field as 
per the I2C protocol. In this case, the slave is not the addressed slave when the RESTART is issued, therefore DW_apb_i2c 
does not generate the RESTART_DET interrupt.
</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>RESTART_DET interrupt is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>RESTART_DET interrupt is inactive</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>MASTER_ON_HOLD</ipxact:name>
            <ipxact:description>Indicates whether master is holding the bus and TX FIFO is empty.
Enabled only when I2C_DYNAMIC_TAR_UPDATE=1 and IC_EMPTYFIFO_HOLD_MASTER_EN=1.
</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>MASTER_ON_HOLD interrupt is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>MASTER_ON_HOLD interrupt is inactive</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_SCL_STUCK_AT_LOW</ipxact:name>
            <ipxact:description>SCL_STUCK_AT_LOW Register field Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>14</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_RAW_INTR_STAT</ipxact:name>
            <ipxact:description>IC_RAW_INTR_STAT Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:bitWidth>17</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_RX_TL</ipxact:name>
          <ipxact:displayName>I2C Receive FIFO Threshold Register</ipxact:displayName>
          <ipxact:description>I2C Receive FIFO Threshold Register</ipxact:description>
          <ipxact:addressOffset>'h38</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>RX_TL</ipxact:name>
            <ipxact:description>Receive FIFO Threshold Level.

Controls the level of entries (or above) that triggers
the RX_FULL interrupt (bit 2 in IC_RAW_INTR_STAT register).
The valid range is 0-255, with the additional restriction that
hardware does not allow this value to be set to a value larger
than the depth of the buffer. If an attempt is made to do that,
the actual value set will be the maximum depth of the buffer.
A value of 0 sets the threshold for 1 entry, and a value of 255
sets the threshold for 256 entries.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_RX_TL</ipxact:name>
            <ipxact:description>IC_RX_TL Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_TX_TL</ipxact:name>
          <ipxact:displayName>I2C Transmit FIFO Threshold Register</ipxact:displayName>
          <ipxact:description>I2C Transmit FIFO Threshold Register</ipxact:description>
          <ipxact:addressOffset>'h3c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>TX_TL</ipxact:name>
            <ipxact:description>Transmit FIFO Threshold Level.

Controls the level of entries (or below) that trigger
the TX_EMPTY interrupt (bit 4 in IC_RAW_INTR_STAT register).
The valid range is 0-255, with the additional restriction that
it may not be set to value larger than the depth of the buffer.
If an attempt is made to do that, the actual value set will be
the maximum depth of the buffer.
A value of 0 sets the threshold for 0 entries, and a value of 255
sets the threshold for 255 entries.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_TX_TL</ipxact:name>
            <ipxact:description>IC_TX_TL Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_CLR_INTR</ipxact:name>
          <ipxact:displayName>Clear Combined and Individual Interrupt Register</ipxact:displayName>
          <ipxact:description>Clear Combined and Individual Interrupt Register</ipxact:description>
          <ipxact:addressOffset>'h40</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>true</ipxact:volatile>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>CLR_INTR</ipxact:name>
            <ipxact:description>Read this register to clear the combined interrupt,
all individual interrupts, and the IC_TX_ABRT_SOURCE register.
This bit does not clear hardware clearable interrupts but software
clearable interrupts. Refer to Bit 9 of the IC_TX_ABRT_SOURCE register
for an exception to clearing IC_TX_ABRT_SOURCE.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_CLR_INTR</ipxact:name>
            <ipxact:description>CLR_INTR Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:bitWidth>31</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_CLR_RX_UNDER</ipxact:name>
          <ipxact:displayName>Clear RX_UNDER Interrupt Register</ipxact:displayName>
          <ipxact:description>Clear RX_UNDER Interrupt Register</ipxact:description>
          <ipxact:addressOffset>'h44</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>true</ipxact:volatile>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>CLR_RX_UNDER</ipxact:name>
            <ipxact:description>Read this register to clear the RX_UNDER
interrupt (bit 0) of the IC_RAW_INTR_STAT register.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_CLR_RX_UNDER</ipxact:name>
            <ipxact:description>IC_CLR_RX_UNDER Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:bitWidth>31</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_CLR_RX_OVER</ipxact:name>
          <ipxact:displayName>Clear RX_OVER Interrupt Register</ipxact:displayName>
          <ipxact:description>Clear RX_OVER Interrupt Register</ipxact:description>
          <ipxact:addressOffset>'h48</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>true</ipxact:volatile>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>CLR_RX_OVER</ipxact:name>
            <ipxact:description>Read this register to clear the RX_OVER
interrupt (bit 1) of the IC_RAW_INTR_STAT register.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_CLR_RX_OVER</ipxact:name>
            <ipxact:description>IC_CLR_RX_OVER Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:bitWidth>31</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_CLR_TX_OVER</ipxact:name>
          <ipxact:displayName>Clear TX_OVER Interrupt Register</ipxact:displayName>
          <ipxact:description>Clear TX_OVER Interrupt Register</ipxact:description>
          <ipxact:addressOffset>'h4c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>true</ipxact:volatile>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>CLR_TX_OVER</ipxact:name>
            <ipxact:description>Read this register to clear the TX_OVER
interrupt (bit 3) of the IC_RAW_INTR_STAT register.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_CLR_TX_OVER</ipxact:name>
            <ipxact:description>IC_CLR_TX_OVER Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:bitWidth>31</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_CLR_RD_REQ</ipxact:name>
          <ipxact:displayName>Clear RD_REQ Interrupt Register</ipxact:displayName>
          <ipxact:description>Clear RD_REQ Interrupt Register</ipxact:description>
          <ipxact:addressOffset>'h50</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>true</ipxact:volatile>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>CLR_RD_REQ</ipxact:name>
            <ipxact:description>Read this register to clear the RD_REQ
interrupt (bit 5) of the IC_RAW_INTR_STAT register.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_CLR_RD_REQ</ipxact:name>
            <ipxact:description>IC_CLR_RD_REQ Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:bitWidth>31</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_CLR_TX_ABRT</ipxact:name>
          <ipxact:displayName>Clear TX_ABRT Interrupt Register</ipxact:displayName>
          <ipxact:description>Clear TX_ABRT Interrupt Register</ipxact:description>
          <ipxact:addressOffset>'h54</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>true</ipxact:volatile>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>CLR_TX_ABRT</ipxact:name>
            <ipxact:description>Read this register to clear the TX_ABRT
interrupt (bit 6) of the IC_RAW_INTR_STAT register,
and the IC_TX_ABRT_SOURCE register.
This also releases the TX FIFO from the flushed/reset
state, allowing more writes to the TX FIFO.
Refer to Bit 9 of the IC_TX_ABRT_SOURCE register for
an exception to clearing IC_TX_ABRT_SOURCE.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_CLR_TX_ABRT</ipxact:name>
            <ipxact:description>IC_CLR_TX_ABRT Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>31</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_CLR_RX_DONE</ipxact:name>
          <ipxact:displayName>Clear RX_DONE Interrupt Register</ipxact:displayName>
          <ipxact:description>Clear RX_DONE Interrupt Register</ipxact:description>
          <ipxact:addressOffset>'h58</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>true</ipxact:volatile>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>CLR_RX_DONE</ipxact:name>
            <ipxact:description>Read this register to clear the RX_DONE
interrupt (bit 7) of the IC_RAW_INTR_STAT register.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_CLR_RX_DONE</ipxact:name>
            <ipxact:description>IC_CLR_RX_DONE Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:bitWidth>31</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_CLR_ACTIVITY</ipxact:name>
          <ipxact:displayName>Clear ACTIVITY Interrupt Register</ipxact:displayName>
          <ipxact:description>Clear ACTIVITY Interrupt Register</ipxact:description>
          <ipxact:addressOffset>'h5c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>true</ipxact:volatile>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>CLR_ACTIVITY</ipxact:name>
            <ipxact:description>Reading this register clears the ACTIVITY
interrupt if the I2C is not active anymore. If the
I2C module is still active on the bus, the ACTIVITY
interrupt bit continues to be set. It is automatically
cleared by hardware if the module is disabled and if
there is no further activity on the bus. The value read
from this register to get status of the ACTIVITY interrupt
(bit 8) of the IC_RAW_INTR_STAT register.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_CLR_ACTIVITY</ipxact:name>
            <ipxact:description>IC_CLR_ACTIVITY Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:bitWidth>31</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_CLR_STOP_DET</ipxact:name>
          <ipxact:displayName>Clear STOP_DET Interrupt Register</ipxact:displayName>
          <ipxact:description>Clear STOP_DET Interrupt Register</ipxact:description>
          <ipxact:addressOffset>'h60</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>true</ipxact:volatile>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>CLR_STOP_DET</ipxact:name>
            <ipxact:description>Read this register to clear the STOP_DET
interrupt (bit 9) of the IC_RAW_INTR_STAT register.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_CLR_STOP_DET</ipxact:name>
            <ipxact:description>IC_CLR_STOP_DET Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:bitWidth>31</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_CLR_START_DET</ipxact:name>
          <ipxact:displayName>Clear START_DET Interrupt Register</ipxact:displayName>
          <ipxact:description>Clear START_DET Interrupt Register</ipxact:description>
          <ipxact:addressOffset>'h64</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>true</ipxact:volatile>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>CLR_START_DET</ipxact:name>
            <ipxact:description>Read this register to clear the START_DET
interrupt (bit 10) of the IC_RAW_INTR_STAT register.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_CLR_START_DET</ipxact:name>
            <ipxact:description>IC_CLR_START_DET Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:bitWidth>31</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_CLR_GEN_CALL</ipxact:name>
          <ipxact:displayName>Clear GEN_CALL Interrupt Register</ipxact:displayName>
          <ipxact:description>Clear GEN_CALL Interrupt Register</ipxact:description>
          <ipxact:addressOffset>'h68</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>true</ipxact:volatile>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>CLR_GEN_CALL</ipxact:name>
            <ipxact:description>Read this register to clear the GEN_CALL
interrupt (bit 11) of IC_RAW_INTR_STAT register.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_CLR_GEN_CALL</ipxact:name>
            <ipxact:description>IC_CLR_GEN_CALL Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:bitWidth>31</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_ENABLE</ipxact:name>
          <ipxact:displayName>I2C ENABLE Register</ipxact:displayName>
          <ipxact:description>I2C Enable Register</ipxact:description>
          <ipxact:addressOffset>'h6c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>ENABLE</ipxact:name>
            <ipxact:description>Controls whether the DW_apb_i2c is enabled.
 - 0: Disables DW_apb_i2c (TX and RX FIFOs are held in an erased state)
 - 1: Enables DW_apb_i2c
Software can disable DW_apb_i2c while it is active.
However, it is important that care be taken to ensure
that DW_apb_i2c is disabled properly. A recommended procedure is 
described in "Disabling DW_apb_i2c".

When DW_apb_i2c is disabled, the following occurs:
 - The TX FIFO and RX FIFO get flushed.
 - Status bits in the IC_INTR_STAT register are still active until DW_apb_i2c goes into IDLE state.
If the module is transmitting, it stops as well as deletes
the contents of the transmit buffer after the current transfer
is complete. If the module is receiving, the DW_apb_i2c stops
the current transfer at the end of the current byte and does not
acknowledge the transfer.

In systems with asynchronous pclk and ic_clk when IC_CLK_TYPE
parameter set to asynchronous (1), there is a two ic_clk delay
when enabling or disabling the DW_apb_i2c.
For a detailed description on how to disable DW_apb_i2c, refer to "Disabling
DW_apb_i2c"
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>I2C is disabled</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>I2C is enabled</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ABORT</ipxact:name>
            <ipxact:description>
When set, the controller initiates the transfer abort.
 - 0: ABORT not initiated or ABORT done
 - 1: ABORT operation in progress
The software can abort the I2C transfer in master mode by setting this bit. The software 
can set this bit only when ENABLE is already set; otherwise, the controller ignores any 
write to ABORT bit. The software cannot clear the ABORT bit once set. In response to 
an ABORT, the controller issues a STOP and flushes the Tx FIFO after completing the 
current transfer, then sets the TX_ABORT interrupt after the abort operation. The 
ABORT bit is cleared automatically after the abort operation. 

For a detailed description on how to abort I2C transfers, refer to "Aborting I2C Transfers".
</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLE</ipxact:name>
                <ipxact:displayName>ABORT operation not in progress</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>ABORT operation in progress</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>TX_CMD_BLOCK</ipxact:name>
            <ipxact:description>In Master mode:
 - 1'b1: Blocks the transmission of data on I2C bus even if Tx FIFO has data to transmit.
 - 1'b0: The transmission of data starts on I2C bus automatically, as soon as the first data is available in the Tx FIFO.
Note: To block the execution of Master commands,
set the TX_CMD_BLOCK bit only when  Tx FIFO is empty (IC_STATUS[2]==1) and Master is in Idle state (IC_STATUS[5] == 0). 
Any further commands put in the Tx FIFO are not executed until TX_CMD_BLOCK bit is unset.
</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>BLOCKED</ipxact:name>
                <ipxact:displayName>Tx Command execution blocked</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>NOT_BLOCKED</ipxact:name>
                <ipxact:displayName>Tx Command execution not blocked</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_SDA_STUCK_RECOVERY_ENABLE</ipxact:name>
            <ipxact:description>SDA_STUCK_RECOVERY_ENABLE Register field Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_ENABLE_1</ipxact:name>
            <ipxact:description>RSVD_IC_ENABLE_1 Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_SMBUS_CLK_RESET</ipxact:name>
            <ipxact:description>SMBUS_CLK_RESET Register field Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_SMBUS_SUSPEND_EN</ipxact:name>
            <ipxact:description>SMBUS_SUSPEND_EN Register field Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_SMBUS_ALERT_EN</ipxact:name>
            <ipxact:description>SMBUS_ALERT_EN Register field Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_ENABLE_2</ipxact:name>
            <ipxact:description>IC_ENABLE Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:bitWidth>13</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_STATUS</ipxact:name>
          <ipxact:displayName>I2C STATUS Register</ipxact:displayName>
          <ipxact:description>I2C Status Register 

This is a read-only register used to indicate the current
transfer status and FIFO status. The status register may be
read at any time. None of the bits in this register request
an interrupt.

When the I2C is disabled by writing 0 in bit 0 of the IC_ENABLE register:
 - Bits 1 and 2 are set to 1
 - Bits 3 and 10 are set to 0
When the master or slave state machines goes to idle and ic_en=0:
 - Bits 5 and 6 are set to 0</ipxact:description>
          <ipxact:addressOffset>'h70</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>true</ipxact:volatile>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>ACTIVITY</ipxact:name>
            <ipxact:description>I2C Activity Status.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>I2C is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>I2C is idle</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>TFNF</ipxact:name>
            <ipxact:description>Transmit FIFO Not Full.
Set when the transmit FIFO contains one or more
empty locations, and is cleared when the FIFO is full.
 - 0: Transmit FIFO is full
 - 1: Transmit FIFO is not full
</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>FULL</ipxact:name>
                <ipxact:displayName>Tx FIFO is full</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>NOT_FULL</ipxact:name>
                <ipxact:displayName>Tx FIFO not full</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>TFE</ipxact:name>
            <ipxact:description>Transmit FIFO Completely Empty.
When the transmit FIFO is completely empty, this bit is set.
When it contains one or more valid entries, this bit is
cleared. This bit field does not request an interrupt.
 - 0: Transmit FIFO is not empty
 - 1: Transmit FIFO is empty
</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>EMPTY</ipxact:name>
                <ipxact:displayName>Tx FIFO is empty</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>NON_EMPTY</ipxact:name>
                <ipxact:displayName>Tx FIFO not empty</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RFNE</ipxact:name>
            <ipxact:description>Receive FIFO Not Empty.
This bit is set when the receive FIFO contains one or
more entries; it is cleared when the receive FIFO is empty.
 - 0: Receive FIFO is empty
 - 1: Receive FIFO is not empty
</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>EMPTY</ipxact:name>
                <ipxact:displayName>Rx FIFO is empty</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>NOT_EMPTY</ipxact:name>
                <ipxact:displayName>Rx FIFO not empty</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RFF</ipxact:name>
            <ipxact:description>Receive FIFO Completely Full.
When the receive FIFO is completely full, this
bit is set. When the receive FIFO contains one
or more empty location, this bit is cleared.
 - 0: Receive FIFO is not full
 - 1: Receive FIFO is full
</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>FULL</ipxact:name>
                <ipxact:displayName>Rx FIFO is full</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>NOT_FULL</ipxact:name>
                <ipxact:displayName>Rx FIFO not full</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>MST_ACTIVITY</ipxact:name>
            <ipxact:description>Master FSM Activity Status.
When the Master Finite State Machine (FSM) is
not in the IDLE state, this bit is set.
 - 0: Master FSM is in IDLE state so the Master part of DW_apb_i2c is not Active
 - 1: Master FSM is not in IDLE state so the Master part of DW_apb_i2c is Active
Note: 
IC_STATUS[0]-that is, ACTIVITY bit-is the OR of
SLV_ACTIVITY and MST_ACTIVITY bits.
</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>Master not idle</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>IDLE</ipxact:name>
                <ipxact:displayName>Master is  idle</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SLV_ACTIVITY</ipxact:name>
            <ipxact:description>Slave FSM Activity Status.
When the Slave Finite State Machine (FSM) is not
in the IDLE state, this bit is set.
 - 0: Slave FSM is in IDLE state so the Slave part of DW_apb_i2c is not Active
 - 1: Slave FSM is not in IDLE state so the Slave part of DW_apb_i2c is Active
</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>Slave not idle</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>IDLE</ipxact:name>
                <ipxact:displayName>Slave is  idle</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_MST_HOLD_TX_FIFO_EMPTY</ipxact:name>
            <ipxact:description>MST_HOLD_TX_FIFO_EMPTY Register field Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_MST_HOLD_RX_FIFO_FULL</ipxact:name>
            <ipxact:description>MST_HOLD_RX_FIFO_FULL Register field Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_SLV_HOLD_TX_FIFO_EMPTY</ipxact:name>
            <ipxact:description>SLV_HOLD_TX_FIFO_EMPTY Regsiter field Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_SLV_HOLD_RX_FIFO_FULL</ipxact:name>
            <ipxact:description>SLV_HOLD_RX_FIFO_FULL Register field Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_SDA_STUCK_NOT_RECOVERED</ipxact:name>
            <ipxact:description>SDA_STUCK_NOT_RECOVERED Register field Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_STATUS_1</ipxact:name>
            <ipxact:description>RSVD_IC_STATUS_1 Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_SMBUS_QUICK_CMD_BIT</ipxact:name>
            <ipxact:description>SMBUS_QUICK_CMD_BIT Register field Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_SMBUS_SLAVE_ADDR_VALID</ipxact:name>
            <ipxact:description>SMBUS_SLAVE_ADDR_VALID Register field Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_SMBUS_SLAVE_ADDR_RESOLVED</ipxact:name>
            <ipxact:description>SMBUS_SLAVE_ADDR_RESOLVED Register field Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_SMBUS_SUSPEND_STATUS</ipxact:name>
            <ipxact:description>SMBUS_SUSPEND_STATUS Register field Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_SMBUS_ALERT_STATUS</ipxact:name>
            <ipxact:description>SMBUS_ALERT_STATUS Register field Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_STATUS_2</ipxact:name>
            <ipxact:description>IC_STATUS Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_TXFLR</ipxact:name>
          <ipxact:displayName>I2C Transmit FIFO Level Register</ipxact:displayName>
          <ipxact:description>I2C Transmit FIFO Level Register
This register contains the number of valid data entries in the transmit FIFO buffer. It is cleared whenever:
 - The I2C is disabled
 - There is a transmit abort - that is, TX_ABRT bit is set in the IC_RAW_INTR_STAT register
 - The slave bulk transmit mode is aborted
The register increments whenever data is placed into the transmit FIFO and decrements when data is taken from the transmit FIFO.</ipxact:description>
          <ipxact:addressOffset>'h74</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>true</ipxact:volatile>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>TXFLR</ipxact:name>
            <ipxact:description>Transmit FIFO Level.
Contains the number of valid data entries in the
transmit FIFO.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_TXFLR</ipxact:name>
            <ipxact:description>TXFLR Register field Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_RXFLR</ipxact:name>
          <ipxact:displayName>I2C Receive FIFO Level Register</ipxact:displayName>
          <ipxact:description>I2C Receive FIFO Level Register
This register contains the number of valid data entries in the receive FIFO buffer. It is cleared whenever:
 - The I2C is disabled
 - Whenever there is a transmit abort caused by any of the events tracked in IC_TX_ABRT_SOURCE
The register increments whenever data is placed into the receive FIFO and decrements when data is taken from the receive FIFO.</ipxact:description>
          <ipxact:addressOffset>'h78</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>true</ipxact:volatile>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>RXFLR</ipxact:name>
            <ipxact:description>Receive FIFO Level.
Contains the number of valid data entries in the
receive FIFO.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_RXFLR</ipxact:name>
            <ipxact:description>RXFLR Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_SDA_HOLD</ipxact:name>
          <ipxact:displayName>I2C SDA Hold Time Length Register</ipxact:displayName>
          <ipxact:description>I2C SDA Hold Time Length Register

The bits [15:0] of this register are used to control the hold time of SDA during
transmit in both slave and master mode (after SCL goes from HIGH to LOW).

The bits [23:16] of this register are used to extend the SDA transition (if any) 
whenever SCL is HIGH in the receiver in either master or slave mode.

Writes to this register succeed only when IC_ENABLE[0]=0.

The values in this register are in units of ic_clk period. The value programmed 
in IC_SDA_TX_HOLD must be greater than the minimum hold time in each mode one 
cycle in master mode, seven cycles in slave mode for the value to be implemented.

The programmed SDA hold time during transmit (IC_SDA_TX_HOLD) cannot exceed at any 
time the duration of the low part of scl. Therefore the programmed value cannot be 
larger than N_SCL_LOW-2, where N_SCL_LOW is the duration of the low part of the scl 
period measured in ic_clk cycles.

</ipxact:description>
          <ipxact:addressOffset>'h7c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>IC_SDA_TX_HOLD</ipxact:name>
            <ipxact:description>Sets the required SDA hold time 
in units of ic_clk period, when DW_apb_i2c acts as a transmitter.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>IC_SDA_RX_HOLD</ipxact:name>
            <ipxact:description>Sets the required SDA hold time 
in units of ic_clk period, when DW_apb_i2c acts as a receiver.
</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_SDA_HOLD</ipxact:name>
            <ipxact:description>IC_SDA_HOLD Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_TX_ABRT_SOURCE</ipxact:name>
          <ipxact:displayName>I2C Transmit Abort Source Register</ipxact:displayName>
          <ipxact:description>I2C Transmit Abort Source Register

This register has 32 bits that indicate the source
of the TX_ABRT bit. Except for Bit 9, this register is
cleared whenever the IC_CLR_TX_ABRT register or the
IC_CLR_INTR register is read. To clear Bit 9, the source
of the ABRT_SBYTE_NORSTRT must be fixed first; RESTART must
be enabled (IC_CON[5]=1), the SPECIAL bit must be cleared
(IC_TAR[11]), or the GC_OR_START bit must be cleared (IC_TAR[10]).

Once the source of the ABRT_SBYTE_NORSTRT is fixed, then this
bit can be cleared in the same manner as other bits in this
register. If the source of the ABRT_SBYTE_NORSTRT is not fixed
before attempting to clear this bit, Bit 9 clears for one cycle
and is then re-asserted.</ipxact:description>
          <ipxact:addressOffset>'h80</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>true</ipxact:volatile>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>ABRT_7B_ADDR_NOACK</ipxact:name>
            <ipxact:description>This field indicates that the Master is in 7-bit addressing mode and the address sent was not acknowledged by any slave.

Role of DW_apb_i2c:  Master-Transmitter or Master-Receiver</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>This abort is generated because of NOACK for 7-bit address</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>This abort is not generated</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ABRT_10ADDR1_NOACK</ipxact:name>
            <ipxact:description>This field indicates that the Master is in 10-bit address mode and the first 10-bit address byte was not acknowledged by any slave.

Reset value: 0x0

Role of DW_apb_i2c:  Master-Transmitter or Master-Receiver</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>Byte 1 of 10Bit Address not ACKed by any slave</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>This abort is not generated</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ABRT_10ADDR2_NOACK</ipxact:name>
            <ipxact:description>This field indicates that the Master is in 10-bit address mode and that the second address byte of the 10-bit address was not acknowledged by any slave.

Role of DW_apb_i2c:  Master-Transmitter or Master-Receiver</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>Byte 2 of 10Bit Address not ACKed by any slave</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>This abort is not generated</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ABRT_TXDATA_NOACK</ipxact:name>
            <ipxact:description>This field indicates the master-mode only bit. When the master receives an acknowledgement for the address, but when it sends data byte(s) following the address, it did not receive an acknowledge from the remote slave(s).


Role of DW_apb_i2c:  Master-Transmitter</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ABRT_TXDATA_NOACK_GENERATED</ipxact:name>
                <ipxact:displayName>Transmitted data not ACKed by addressed slave</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ABRT_TXDATA_NOACK_VOID</ipxact:name>
                <ipxact:displayName>Transmitted data non-ACKed by addressed slave-scenario not present</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ABRT_GCALL_NOACK</ipxact:name>
            <ipxact:description>This field indicates that DW_apb_i2c in master mode has sent a General Call and no slave on the bus acknowledged the General Call.


Role of DW_apb_i2c:  Master-Transmitter</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ABRT_GCALL_NOACK_GENERATED</ipxact:name>
                <ipxact:displayName>GCALL not ACKed by any slave</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ABRT_GCALL_NOACK_VOID</ipxact:name>
                <ipxact:displayName>GCALL not ACKed by any slave-scenario not present</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ABRT_GCALL_READ</ipxact:name>
            <ipxact:description>This field indicates that DW_apb_i2c in the master mode has sent a General Call but the user programmed the byte following the General Call to be a read from the bus (IC_DATA_CMD[9] is set to 1).


Role of DW_apb_i2c:  Master-Transmitter</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ABRT_GCALL_READ_GENERATED</ipxact:name>
                <ipxact:displayName>GCALL is followed by read from bus</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ABRT_GCALL_READ_VOID</ipxact:name>
                <ipxact:displayName>GCALL is followed by read from bus-scenario not present</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ABRT_HS_ACKDET</ipxact:name>
            <ipxact:description>This field indicates that the Master is in High Speed mode and the High Speed Master code was acknowledged (wrong behavior).


Role of DW_apb_i2c:  Master</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ABRT_HS_ACK_GENERATED</ipxact:name>
                <ipxact:displayName>HS Master code ACKed in HS Mode</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ABRT_HS_ACK_VOID</ipxact:name>
                <ipxact:displayName>HS Master code ACKed in HS Mode- scenario not present</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ABRT_SBYTE_ACKDET</ipxact:name>
            <ipxact:description>This field indicates that the Master has sent a START Byte and the START Byte was acknowledged (wrong behavior).

Role of DW_apb_i2c:  Master</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ABRT_SBYTE_ACKDET_GENERATED</ipxact:name>
                <ipxact:displayName>ACK detected for START byte</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ABRT_SBYTE_ACKDET_VOID</ipxact:name>
                <ipxact:displayName>ACK detected for START byte- scenario not present</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ABRT_HS_NORSTRT</ipxact:name>
            <ipxact:description>This field indicates that the restart is disabled (IC_RESTART_EN bit (IC_CON[5]) =0) and the user is trying to use the master to transfer data in High Speed mode.

Role of DW_apb_i2c:  Master-Transmitter or Master-Receiver</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ABRT_HS_NORSTRT_GENERATED</ipxact:name>
                <ipxact:displayName>User trying to switch Master to HS mode when RESTART disabled</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ABRT_HS_NORSTRT_VOID</ipxact:name>
                <ipxact:displayName>User trying to switch Master to HS mode when RESTART disabled- scenario not present</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ABRT_SBYTE_NORSTRT</ipxact:name>
            <ipxact:description>To clear Bit 9, the source of the
ABRT_SBYTE_NORSTRT must be fixed first;
restart must be enabled (IC_CON[5]=1),
the SPECIAL bit must be cleared (IC_TAR[11]),
or the GC_OR_START bit must be cleared
(IC_TAR[10]). Once the source of the
ABRT_SBYTE_NORSTRT is fixed,
then this bit can be cleared in the same
manner as other bits in this register. If
the source of the ABRT_SBYTE_NORSTRT is not fixed
before attempting to clear this bit, bit 9
clears for one cycle and then gets reasserted. When this field is set to 1, the restart is disabled (IC_RESTART_EN bit (IC_CON[5]) =0) and the user is trying to send a START Byte.

Role of DW_apb_i2c:  Master</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ABRT_SBYTE_NORSTRT_GENERATED</ipxact:name>
                <ipxact:displayName>User trying to send START byte when RESTART disabled</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ABRT_SBYTE_NORSTRT_VOID</ipxact:name>
                <ipxact:displayName>User trying to send START byte when RESTART disabled- scenario not present</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ABRT_10B_RD_NORSTRT</ipxact:name>
            <ipxact:description>This field indicates that the restart is disabled (IC_RESTART_EN bit (IC_CON[5]) =0) and the master sends a read command in 10-bit addressing mode.

Role of DW_apb_i2c:  Master-Receiver</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ABRT_10B_RD_GENERATED</ipxact:name>
                <ipxact:displayName>Master trying to read in 10Bit addressing mode when RESTART disabled</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ABRT_10B_RD_VOID</ipxact:name>
                <ipxact:displayName>Master not trying to read in 10Bit addressing mode when RESTART disabled</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ABRT_MASTER_DIS</ipxact:name>
            <ipxact:description>This field indicates that the User tries to initiate a Master operation with the Master mode disabled.

Role of DW_apb_i2c:  Master-Transmitter or Master-Receiver</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ABRT_MASTER_DIS_GENERATED</ipxact:name>
                <ipxact:displayName>User intitating master operation when MASTER disabled</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ABRT_MASTER_DIS_VOID</ipxact:name>
                <ipxact:displayName>User initiating master operation when MASTER disabled- scenario not present</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ARB_LOST</ipxact:name>
            <ipxact:description>This field specifies that the Master has lost arbitration, or if IC_TX_ABRT_SOURCE[14] is also set, then the slave transmitter has lost arbitration.

Role of DW_apb_i2c:  Master-Transmitter or Slave-Transmitter</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ABRT_LOST_GENERATED</ipxact:name>
                <ipxact:displayName>Master or Slave-Transmitter lost arbitration</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ABRT_LOST_VOID</ipxact:name>
                <ipxact:displayName>Master or Slave-Transmitter lost arbitration- scenario not present</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ABRT_SLVFLUSH_TXFIFO</ipxact:name>
            <ipxact:description>This field specifies that the Slave has received a read command and some data exists in the TX FIFO, so the slave issues a TX_ABRT interrupt to flush old data in TX FIFO.

Role of DW_apb_i2c:  Slave-Transmitter</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ABRT_SLVFLUSH_TXFIFO_GENERATED</ipxact:name>
                <ipxact:displayName>Slave flushes existing data in TX-FIFO upon getting read command</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ABRT_SLVFLUSH_TXFIFO_VOID</ipxact:name>
                <ipxact:displayName>Slave flushes existing data in TX-FIFO upon getting read command- scenario not present</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ABRT_SLV_ARBLOST</ipxact:name>
            <ipxact:description>This field indicates that a Slave has lost the bus while transmitting data to a remote master. IC_TX_ABRT_SOURCE[12] is set at the same time.
Note:  Even though the slave never
'owns' the bus, something could go
wrong on the bus. This is a fail safe
check. For instance, during a data
transmission at the low-to-high
transition of SCL, if what is on the data
bus is not what is supposed to be
transmitted, then DW_apb_i2c no
longer own the bus.

Role of DW_apb_i2c:  Slave-Transmitter</ipxact:description>
            <ipxact:bitOffset>14</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ABRT_SLV_ARBLOST_GENERATED</ipxact:name>
                <ipxact:displayName>Slave lost arbitration to remote master</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ABRT_SLV_ARBLOST_VOID</ipxact:name>
                <ipxact:displayName>Slave lost arbitration to remote master- scenario not present</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ABRT_SLVRD_INTX</ipxact:name>
            <ipxact:description>1: When the processor side responds to
a slave mode request for data to be
transmitted to a remote master and user
writes a 1 in CMD (bit 8) of
IC_DATA_CMD register.

Role of DW_apb_i2c:  Slave-Transmitter</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ABRT_SLVRD_INTX_GENERATED</ipxact:name>
                <ipxact:displayName>Slave trying to transmit to remote master in read mode</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ABRT_SLVRD_INTX_VOID</ipxact:name>
                <ipxact:displayName>Slave trying to transmit to remote master in read mode- scenario not present</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ABRT_USER_ABRT</ipxact:name>
            <ipxact:description>This is a master-mode-only bit. Master has 
detected the transfer abort (IC_ENABLE[1])

Role of DW_apb_i2c:  Master-Transmitter</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ABRT_USER_ABRT_GENERATED</ipxact:name>
                <ipxact:displayName>Transfer abort detected by master</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ABRT_USER_ABRT_VOID</ipxact:name>
                <ipxact:displayName>Transfer abort detected by master- scenario not present</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_ABRT_SDA_STUCK_AT_LOW</ipxact:name>
            <ipxact:description>ABRT_SDA_STUCK_AT_LOW Register field Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_ABRT_DEVICE_WRITE</ipxact:name>
            <ipxact:description>ABRT_DEVICE_WRITE Register field Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_TX_ABRT_SOURCE</ipxact:name>
            <ipxact:description>IC_TX_ABRT_SOURCE Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>TX_FLUSH_CNT</ipxact:name>
            <ipxact:description>This field indicates the 
number of Tx FIFO Data Commands which are flushed due to TX_ABRT interrupt. 
It is cleared whenever I2C is disabled.

Role of DW_apb_i2c:  Master-Transmitter or Slave-Transmitter</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>9</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_SDA_SETUP</ipxact:name>
          <ipxact:displayName>I2C SDA Setup Register</ipxact:displayName>
          <ipxact:description>I2C SDA Setup Register

This register controls the amount of time delay
(in terms of number of ic_clk clock periods) introduced
in the rising edge of SCL - relative to SDA changing - when
DW_apb_i2c services a read request in a slave-transmitter operation.
The relevant I2C requirement is tSU:DAT (note 4) as detailed in the
I2C Bus Specification.
This register must be programmed with a value equal to or greater than 2. 

Writes to this register succeed only when IC_ENABLE[0] = 0.

Note: The length of setup time is calculated using [(IC_SDA_SETUP - 1) * (ic_clk_period)], so if the
user requires 10 ic_clk periods of setup time, they should program a value of 11.
The IC_SDA_SETUP register is only used by the DW_apb_i2c when operating as a slave
transmitter.
</ipxact:description>
          <ipxact:addressOffset>'h94</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>SDA_SETUP</ipxact:name>
            <ipxact:description>SDA Setup.
It is recommended that if the required delay is 1000ns,
then for an ic_clk frequency of 10 MHz, IC_SDA_SETUP
should be programmed to a value of 11. IC_SDA_SETUP must be programmed with a minimum value of 2.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h64</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_SDA_SETUP</ipxact:name>
            <ipxact:description>IC_SDA_SETUP Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_ACK_GENERAL_CALL</ipxact:name>
          <ipxact:displayName>I2C ACK General Call Register</ipxact:displayName>
          <ipxact:description>I2C ACK General Call Register

The register controls whether DW_apb_i2c responds
with a ACK or NACK when it receives an I2C
General Call address.

This register is applicable only when the DW_apb_i2c is in slave mode.
</ipxact:description>
          <ipxact:addressOffset>'h98</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>ACK_GEN_CALL</ipxact:name>
            <ipxact:description>ACK General Call.
When set to 1, DW_apb_i2c responds with a ACK
(by asserting ic_data_oe) when it receives a General Call.
Otherwise, DW_apb_i2c responds with a NACK
(by negating ic_data_oe).</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>Generate NACK for  General Call</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>Generate ACK for a General Call</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_ACK_GEN_1_31</ipxact:name>
            <ipxact:description>RSVD_IC_ACK_GEN_1_31 Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:bitWidth>31</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_ENABLE_STATUS</ipxact:name>
          <ipxact:displayName>I2C Enable Status Register</ipxact:displayName>
          <ipxact:description>I2C Enable Status Register

The register is used to report the DW_apb_i2c hardware
status when the IC_ENABLE[0] register is set from 1 to 0;
that is, when DW_apb_i2c is disabled.

If IC_ENABLE[0] has been set to 1, bits 2:1 are forced to 0,
and bit 0 is forced to 1.

If IC_ENABLE[0] has been set to 0, bits 2:1 is only be valid
as soon as bit 0 is read as '0'.

Note: 
When IC_ENABLE[0] has been set to 0, a delay occurs for bit 0 to be read as 0 because
disabling the DW_apb_i2c depends on I2C bus activities.
</ipxact:description>
          <ipxact:addressOffset>'h9c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>true</ipxact:volatile>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>IC_EN</ipxact:name>
            <ipxact:description>ic_en Status.
This bit always reflects the value driven
on the output port ic_en.
 - When read as 1, DW_apb_i2c is deemed to be in an enabled state.
 - When read as 0, DW_apb_i2c is deemed completely inactive.
Note:  The CPU can safely read this bit anytime.
When this bit is read as 0, the CPU can safely
read SLV_RX_DATA_LOST (bit 2) and
SLV_DISABLED_WHILE_BUSY (bit 1).
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>I2C disabled</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>I2C enabled</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SLV_DISABLED_WHILE_BUSY</ipxact:name>
            <ipxact:description>Slave Disabled While Busy (Transmit, Receive).
This bit indicates if a potential or active Slave
operation has been aborted due to the setting bit 0 of
the IC_ENABLE register from 1 to 0. This bit is set
when the CPU writes a 0 to the IC_ENABLE register
while:
 
(a) DW_apb_i2c is receiving the address byte
of the Slave-Transmitter operation from a remote master;

OR, 

(b) address and data bytes of the Slave-Receiver
operation from a remote master.

When read as 1, DW_apb_i2c is deemed to have forced a
NACK during any part of an I2C transfer, irrespective
of whether the I2C address matches the slave address set
in DW_apb_i2c (IC_SAR register) OR if the transfer is
completed before IC_ENABLE is set to 0 but has not
taken effect.

Note:  If the remote I2C master terminates the transfer
with a STOP condition before the DW_apb_i2c has a chance
to NACK a transfer, and IC_ENABLE[0] has been set to 0, then
this bit will also be set to 1.

When read as 0, DW_apb_i2c is deemed to have been disabled
when there is master activity, or when the I2C bus is idle.

Note:  The CPU can safely read this bit when IC_EN (bit 0)
is read as 0.
</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>Slave is disabled when it is active</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>Slave is disabled when it is idle</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SLV_RX_DATA_LOST</ipxact:name>
            <ipxact:description>Slave Received Data Lost.
This bit indicates if a Slave-Receiver operation has been
aborted with at least one data byte received from an
I2C transfer due to the setting bit 0 of IC_ENABLE from 1 to 0.
When read as 1, DW_apb_i2c is deemed to have been actively engaged
in an aborted I2C transfer (with matching address) and the
data phase of the I2C transfer has been entered, even though
a data byte has been responded with a NACK.

Note:  If the remote I2C master terminates the transfer with a
STOP condition before the DW_apb_i2c has a chance to NACK a
transfer, and IC_ENABLE[0] has been set to 0, then this bit is
also set to 1.

When read as 0, DW_apb_i2c is deemed to have been disabled without
being actively involved in the data phase of a Slave-Receiver transfer.

Note:  The CPU can safely read this bit when IC_EN (bit 0) is
read as 0.
</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>Slave RX Data is lost</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>Slave RX Data is not lost</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_ENABLE_STATUS</ipxact:name>
            <ipxact:description>IC_ENABLE_STATUS Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:bitWidth>29</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_FS_SPKLEN</ipxact:name>
          <ipxact:displayName>I2C SS, FS or FM+  spike suppression limit</ipxact:displayName>
          <ipxact:description>I2C SS, FS or FM+  spike suppression limit

This register is used to store the duration, measured in ic_clk cycles,
of the longest spike that is filtered out by the spike suppression logic w
hen the component is operating in SS, FS or FM+ modes. 
The relevant I2C requirement is tSP (table 4) as detailed in the 
I2C Bus Specification. This register must be programmed with a minimum value of 1.
</ipxact:description>
          <ipxact:addressOffset>'ha0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>IC_FS_SPKLEN</ipxact:name>
            <ipxact:description>This register must be set before any I2C bus transaction can take place to
ensure stable operation. This register sets the duration, measured in ic_clk cycles,
of the longest spike in the SCL or SDA lines that will be filtered out by the spike 
suppression logic.
This register can be written only when the I2C interface is disabled which
corresponds to the IC_ENABLE[0] register being set to 0. Writes at other times
have no effect.
The minimum valid value is 1; hardware prevents values less than this being
written, and if attempted results in 1 being set. or more information, refer to "Spike Suppression".
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h5</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_FS_SPKLEN</ipxact:name>
            <ipxact:description>IC_FS_SPKLEN Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_HS_SPKLEN</ipxact:name>
          <ipxact:displayName>I2C HS spike suppression limit register</ipxact:displayName>
          <ipxact:description>I2C HS spike suppression limit register

This register is used to store the duration, measured in ic_clk cycles,
of the longest spike that is filtered out by the spike suppression logic when the component is operating in HS modes. 
The relevant I2C requirement is tSP (table 6) as detailed in the 
I2C Bus Specification. This register must be programmed with a minimum value of 1 and is implemented only
if the component is configured to support HS mode; that is, if the IC_MAX_SPEED_MODE parameter is set to 3.
</ipxact:description>
          <ipxact:addressOffset>'ha4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>IC_HS_SPKLEN</ipxact:name>
            <ipxact:description>This register must be set before any I2C bus transaction can take place to
ensure stable operation. This register sets the duration, measured in ic_clk cycles,
of the longest spike in the SCL or SDA lines that will be filtered out by the spike 
suppression logic; for more information, refer to "Spike Suppression"

This register can be written only when the I2C interface is disabled which
corresponds to the IC_ENABLE[0] register being set to 0. Writes at other times
have no effect.

The minimum valid value is 1; hardware prevents values less than this being
written, and if attempted results in 1 being set. 
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_HS_SPKLEN</ipxact:name>
            <ipxact:description>IC_HS_SPKLEN Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>REG_TIMEOUT_RST</ipxact:name>
          <ipxact:displayName>Register timeout counter reset value</ipxact:displayName>
          <ipxact:description>Name: Register timeout counter reset register
Size: REG_TIMEOUT_WIDTH bits
Address: 0xF0
Read/Write Access: Read/Write
This register keeps the timeout value of register timer counter. The reset value of the register is REG_TIMEOUT_VALUE. The default reset value can be further modified if HC_REG_TIMEOUT_VALUE = 0. The
final programmed value (or the default reset value if not programmed) determines from what value the register timeout counter starts counting down. A zero on this counter will break the waited
transaction with PSLVERR as high.</ipxact:description>
          <ipxact:addressOffset>'hf0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>true</ipxact:volatile>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>REG_TIMEOUT_RST_rw</ipxact:name>
            <ipxact:description>This field holds reset value of REG_TIMEOUT counter register.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h8</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_REG_TIMEOUT_RST</ipxact:name>
            <ipxact:description>Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_COMP_PARAM_1</ipxact:name>
          <ipxact:displayName>Component Parameter Register 1</ipxact:displayName>
          <ipxact:description>Component Parameter Register 1

Note
This is a constant read-only register that contains
encoded information about the component's parameter settings.
The reset value depends on coreConsultant parameter(s).</ipxact:description>
          <ipxact:addressOffset>'hf4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>APB_DATA_WIDTH</ipxact:name>
            <ipxact:description>The value of this register is
derived from the APB_DATA_WIDTH coreConsultant
parameter.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h2</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>APB_08BITS</ipxact:name>
                <ipxact:displayName>APB data bus width is 08 bits</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>APB_16BITS</ipxact:name>
                <ipxact:displayName>APB data bus width is 16 bits</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>APB_32BITS</ipxact:name>
                <ipxact:displayName>APB data bus width is 32 bits</ipxact:displayName>
                <ipxact:value>'h2</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>RESERVED</ipxact:name>
                <ipxact:displayName>Reserved bits</ipxact:displayName>
                <ipxact:value>'h3</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>MAX_SPEED_MODE</ipxact:name>
            <ipxact:description>The value of this register is
derived from the IC_MAX_SPEED_MODE coreConsultant
parameter.
 - 0x0: Reserved
 - 0x1: Standard
 - 0x2: Fast
 - 0x3: High
</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h3</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>FAST</ipxact:name>
                <ipxact:displayName>IC MAX SPEED is FAST MODE</ipxact:displayName>
                <ipxact:value>'h2</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>HIGH</ipxact:name>
                <ipxact:displayName>IC MAX SPEED is HIGH MODE</ipxact:displayName>
                <ipxact:value>'h3</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>STANDARD</ipxact:name>
                <ipxact:displayName>IC MAX SPEED is STANDARD MODE</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>HC_COUNT_VALUES</ipxact:name>
            <ipxact:description>The value of this register is
derived from the IC_HC_COUNT VALUES coreConsultant
parameter.
</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>Programmable count values for each mode.</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>Hard code the count values for each mode.</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>INTR_IO</ipxact:name>
            <ipxact:description>The value of this register is
derived from the IC_INTR_IO coreConsultant
parameter.
</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>COMBINED</ipxact:name>
                <ipxact:displayName>COMBINED   Interrupt outputs</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INDIVIDUAL</ipxact:name>
                <ipxact:displayName>INDIVIDUAL Interrupt outputs</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>HAS_DMA</ipxact:name>
            <ipxact:description>The value of this register is
derived from the IC_HAS_DMA coreConsultant
parameter.
</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>DMA handshaking signals are disabled</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>DMA handshaking signals are enabled</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ADD_ENCODED_PARAMS</ipxact:name>
            <ipxact:description>The value of this register is derived
from the IC_ADD_ENCODED_PARAMS coreConsultant
parameter.
Reading 1 in this bit means that the capability
of reading these encoded parameters via software has been
included. Otherwise, the entire register is 0 regardless of
the setting of any other parameters that are encoded in the
bits.
</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISBALED</ipxact:name>
                <ipxact:displayName>Disables capability of reading encoded parameters</ipxact:displayName>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>Enables  capability of reading encoded parameters</ipxact:displayName>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RX_BUFFER_DEPTH</ipxact:name>
            <ipxact:description>The value of this register is
derived from the IC_RX_BUFFER_DEPTH coreConsultant
parameter.
 - 0x00: Reserved
 - 0x01: 2
 - 0x02: 3
 - ...
 - 0xFF: 256</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h7</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>TX_BUFFER_DEPTH</ipxact:name>
            <ipxact:description>The value of this register is derived
from the IC_TX_BUFFER_DEPTH coreConsultant
parameter.
 - 0x00 = Reserved
 - 0x01 = 2
 - 0x02 = 3
 - ...
 - 0xFF = 256</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h7</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IC_COMP_PARAM_1</ipxact:name>
            <ipxact:description>IC_COMP_PARAM_1 Reserved bits - Read Only</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_COMP_VERSION</ipxact:name>
          <ipxact:displayName>I2C Component Version Register</ipxact:displayName>
          <ipxact:description>I2C Component Version Register</ipxact:description>
          <ipxact:addressOffset>'hf8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>IC_COMP_VERSION</ipxact:name>
            <ipxact:description>Specific values for this register are
described in the Releases Table in the
DW_apb_i2c Release Notes</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h3230322a</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IC_COMP_TYPE</ipxact:name>
          <ipxact:displayName>I2C Component Type Register</ipxact:displayName>
          <ipxact:description>I2C Component Type Register</ipxact:description>
          <ipxact:addressOffset>'hfc</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>IC_COMP_TYPE</ipxact:name>
            <ipxact:description>Designware Component Type number
= 0x44_57_01_40. This assigned unique
hex value is constant and is derived
from the two ASCII letters 'DW' followed
by a 16-bit unsigned number.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h44570140</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
      </ipxact:addressBlock>
      <ipxact:addressUnitBits>8</ipxact:addressUnitBits>
    </ipxact:memoryMap>
  </ipxact:memoryMaps>
  <ipxact:model>
    <ipxact:views>
      <ipxact:view>
        <ipxact:name>RTL</ipxact:name>
        <ipxact:envIdentifier>:*Synthesis:</ipxact:envIdentifier>
        <ipxact:componentInstantiationRef>RTL</ipxact:componentInstantiationRef>
      </ipxact:view>
    </ipxact:views>
    <ipxact:instantiations>
      <ipxact:componentInstantiation>
        <ipxact:name>RTL</ipxact:name>
        <ipxact:description>No description available.</ipxact:description>
        <ipxact:language strict="true">verilog</ipxact:language>
        <ipxact:moduleName>DW_apb_i2c</ipxact:moduleName>
        <ipxact:fileSetRef>
          <ipxact:localName>Hdl</ipxact:localName>
        </ipxact:fileSetRef>
      </ipxact:componentInstantiation>
    </ipxact:instantiations>
    <ipxact:ports>
      <ipxact:port>
        <ipxact:name>paddr</ipxact:name>
        <ipxact:description>APB address bus. Uses lower 7 bits of the address bus for register decode.
Active State: N/A
SynchronousTo: pclk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: No</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>7</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pclk</ipxact:name>
        <ipxact:description>APB clock for the bus interface unit. 
Note: ic_clk frequency must be greater than or equal to pclk frequency. The configuration parameter IC_CLK_TYPE indicates the relationship between pclk and ic_clk. It can be asynchronous (1) or identical (0).
Active State: N/A
SynchronousTo: None
PowerDomain: SINGLE_DOMAIN
RegisteredBy: N/A</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:drivers>
            <ipxact:driver>
              <ipxact:clockDriver>
                <ipxact:clockPeriod>6</ipxact:clockPeriod>
                <ipxact:clockPulseOffset>0</ipxact:clockPulseOffset>
                <ipxact:clockPulseValue>1</ipxact:clockPulseValue>
                <ipxact:clockPulseDuration>3</ipxact:clockPulseDuration>
              </ipxact:clockDriver>
            </ipxact:driver>
          </ipxact:drivers>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>penable</ipxact:name>
        <ipxact:description>APB enable control. Asserted for a single pclk cycle and used for timing read/write operations.
Active State: High
SynchronousTo: pclk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: No</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>presetn</ipxact:name>
        <ipxact:description>An APB interface domain reset. The signal is asserted asynchronously, but is deasserted synchronously after the rising edge of pclk. The synchronization must be provided external to this component.
Active State: Low
SynchronousTo: Asynchronous
PowerDomain: SINGLE_DOMAIN
RegisteredBy: N/A</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>psel</ipxact:name>
        <ipxact:description>APB peripheral select that lasts for two pclk cycles. When asserted, indicates that the peripheral has been selected for a read/write operation.
Active State: High
SynchronousTo: pclk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: No</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pwdata</ipxact:name>
        <ipxact:description>APB write data bus. Driven by the bus master (DW_ahb to DW_apb bridge) during write cycles. Can be 8, 16, or 32 bits wide depending on APB_DATA_WIDTH parameter.
Active State: N/A
SynchronousTo: pclk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: No</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>31</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pwrite</ipxact:name>
        <ipxact:description>APB write control. When high, indicates a write access to the peripheral; when low, indicates a read access.
Active State: N/A
SynchronousTo: pclk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: No</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>prdata</ipxact:name>
        <ipxact:description>APB readback data. Driven by the selected peripheral during read cycles. Can be 8, 16, or 32 bits wide depending on APB_DATA_WIDTH parameter.
Active State: N/A
SynchronousTo: pclk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>31</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pready</ipxact:name>
        <ipxact:description>The APB ready signal, used to extend the APB transfer and it is also used to indicate the end of a transaction when there is a high in the access phase of a transaction.
Active State: High
SynchronousTo: pclk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pslverr</ipxact:name>
        <ipxact:description>APB slave error response signal. The signal issues an error when some error condition occurs, as specified in databook.
Active State: High
SynchronousTo: pclk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>debug_addr</ipxact:name>
        <ipxact:description>In the master or slave mode of operation, this signal is set to 1 when the addressing phase is active on the I2C bus.
Active State: High
SynchronousTo: ic_clk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>debug_addr_10bit</ipxact:name>
        <ipxact:description>In the Slave mode of operation, this signal is set if 10-bit addressing is enabled and if the slave has received a matching 10-bit address with respect to IC_SAR register. 
 This signal is not applicable in Master Mode.
Active State: High
SynchronousTo: ic_clk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>debug_data</ipxact:name>
        <ipxact:description>In the master or slave mode of operation, this signal is set to 1 when a byte of data is actively being read or written by DW_apb_i2c. This bit remains 1 until the transaction has completed.
Active State: High
SynchronousTo: ic_clk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>debug_hs</ipxact:name>
        <ipxact:description>In the master mode of operation, this signal is set to 1 when DW_apb_i2c is performing high-speed mode transfers. This bit is set after the high-speed master code is transmitted and remains 1 until the master leaves high-speed mode.
Active State: High
SynchronousTo: ic_clk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>debug_master_act</ipxact:name>
        <ipxact:description>This bit is set to 1 when the master module is active.
Active State: High
SynchronousTo: ic_clk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>debug_mst_cstate</ipxact:name>
        <ipxact:description>Master FSM state vector.
Active State: N/A
SynchronousTo: ic_clk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>4</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>debug_p_gen</ipxact:name>
        <ipxact:description>In the master mode of operation, this signal is set to 1 when DW_apb_i2c is driving a STOP condition on the bus.
Active State: Low
SynchronousTo: ic_clk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>debug_rd</ipxact:name>
        <ipxact:description>In the master mode of operation, this signal is set to 1 whenever the master is receiving data. This bit remains 1 until the transfer is complete or until the direction changes.
Active State: High
SynchronousTo: ic_clk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>debug_s_gen</ipxact:name>
        <ipxact:description>In the master mode of operation, this signal is set to 1 when DW_apb_i2c is driving a START condition on the bus.
Active State: Low
SynchronousTo: ic_clk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>debug_slave_act</ipxact:name>
        <ipxact:description>This bit is set to 1 when the slave module is active.
Active State: High
SynchronousTo: ic_clk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>debug_slv_cstate</ipxact:name>
        <ipxact:description>Slave FSM state vector.
Active State: N/A
SynchronousTo: ic_clk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>3</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>debug_wr</ipxact:name>
        <ipxact:description>In the master mode of operation, this signal is set to 1 whenever the master is transmitting data. This bit remains 1 until the transfer is complete or the direction changes.
Active State: High
SynchronousTo: ic_clk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ic_clk</ipxact:name>
        <ipxact:description>Peripheral clock. DW_apb_i2c runs on this clock and is used to clock transfers in standard, fast, and high-speed mode. 
 Note: ic_clk frequency must be greater than or equal to pclk frequency. The configuration parameter IC_CLK_TYPE indicates the relationship between pclk and ic_clk. It can be asynchronous (1) or identical (0).
Active State: N/A
SynchronousTo: None
PowerDomain: SINGLE_DOMAIN
RegisteredBy: N/A</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:drivers>
            <ipxact:driver>
              <ipxact:clockDriver>
                <ipxact:clockPeriod>6</ipxact:clockPeriod>
                <ipxact:clockPulseOffset>0</ipxact:clockPulseOffset>
                <ipxact:clockPulseValue>1</ipxact:clockPulseValue>
                <ipxact:clockPulseDuration>3</ipxact:clockPulseDuration>
              </ipxact:clockDriver>
            </ipxact:driver>
          </ipxact:drivers>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
            <snps:attribute name="SimTieOff">pclk</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ic_clk_in_a</ipxact:name>
        <ipxact:description>In (IC_ULTRA_FAST_MODE = 0) mode - Incoming I2C clock. This is the input SCL signal. Double-registered for metastability synchronization. 
 Note: DW_apb_i2c provides filtering on the SDA (ic_data_in_a) and SCL (ic_clk_in_a) inputs, suppressing noise and signal spikes with durations less than one ic_clk period. 
 In Ultra-Fast(IC_ULTRA_FAST_MODE = 1) mode - Incoming I2C clock. This is the input SCL signal. Double-registered for metastability synchronization.  
 Note: DW_apb_i2c provides filtering on the SDA (ic_data_in_a) and SCL (ic_clk_in_a) inputs, suppressing noise and signal spikes with durations less than one ic_clk period. This signal is used as USCL input for slave device. This signal is asynchronous to ic_clk.
Active State: High
SynchronousTo: Asynchronous
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ic_data_in_a</ipxact:name>
        <ipxact:description>In (IC_ULTRA_FAST_MODE = 0) mode - Incoming I2C Data. It is the input SDA signal. Double-registered for metastability synchronization.  
 Note: DW_apb_i2c provides filtering on the SDA (ic_data_in_a) and SCL (ic_clk_in_a) inputs, suppressing noise and signal spikes with durations less than one ic_clk period. 
 In Ultra-Fast(IC_ULTRA_FAST_MODE = 1) mode - Incoming I2C Data. It is the input SDA signal. Double-registered for metastability synchronization. 
 Note: DW_apb_i2c provides filtering on the SDA (ic_data_in_a) and SCL (ic_clk_in_a) inputs, suppressing noise and signal spikes with durations less than one ic_clk period.This signal is used as USDA input for slave device. This signal is asynchronous to ic_clk.
Active State: N/A
SynchronousTo: Asynchronous
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ic_rst_n</ipxact:name>
        <ipxact:description>I2C reset. Used to reset flip-flops that are clocked by the ic_clk clock. 
 Note: This signal does not reset DW_apb_i2c control, configuration, and status registers. The signal is asserted asynchronously, but is deasserted synchronously after the rising edge of ic_clk. The synchronization must be provided external to this component.
Active State: Low
SynchronousTo: Asynchronous
PowerDomain: SINGLE_DOMAIN
RegisteredBy: N/A</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
            <snps:attribute name="SimTieOff">presetn</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ic_clk_oe</ipxact:name>
        <ipxact:description>In (IC_ULTRA_FAST_MODE = 0) mode - Outgoing I2C clock. Open drain synchronous with ic_clk. 
 In Ultra-Fast(IC_ULTRA_FAST_MODE = 1) mode - Outgoing I2C clock, inverted. This signal is used as USCL out from master device.
Active State: High
SynchronousTo: ic_clk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ic_current_src_en</ipxact:name>
        <ipxact:description>Optional. Current source pull-up. Controls the polarity of the current source pull-up on the SCLH. This pull-up is used to shorten the rise time on SCLH by activating an user-supplied external current source pull-up circuit. It is disabled after a RESTART condition and after each A/A bit when acting as the active master. 
 This signal enables other devices to delay the serial transfer by stretching the LOW period of the SCLH signal. The active master re-enables its current source pull-up circuit again when all devices have released and the SCLH signal reaches high level, therefore, shortening the last part of the SCLH signal's rise time.
Active State: High
SynchronousTo: ic_clk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ic_data_oe</ipxact:name>
        <ipxact:description>In (IC_ULTRA_FAST_MODE = 0) mode - Outgoing I2C Data. Open Drain Synchronous to ic_clk. 
 In Ultra-Fast(IC_ULTRA_FAST_MODE = 1) mode - Outgoing I2C Data, inverted. This signal is used as USDA out from master device.
Active State: High
SynchronousTo: ic_clk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ic_en</ipxact:name>
        <ipxact:description>I2C interface enable. Indicates whether DW_apb_i2c is enabled; this signal is set to 0 when IC_ENABLE[0] is set to 0 (disabled). Because DW_apb_i2c always finishes its current transfer before turning off ic_en, this signal may be used by a clock generator to control whether the DW_apb_i2c ic_clk is active or inactive.
Active State: Low
SynchronousTo: pclk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ic_activity_intr</ipxact:name>
        <ipxact:description>Optional. I2C activity active high interrupt. This signal is included on the interface when the configuration IC_INTR_IO parameter is unchecked (0), which indicates that individual interrupt lines appear on the I/O.
Active State: High. Polarity is set by the configuration parameter IC_INTR_POL (checked(1) = active high).
SynchronousTo: pclk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ic_gen_call_intr</ipxact:name>
        <ipxact:description>Optional. General Call received active high interrupt. This signal is included on the interface when the configuration IC_INTR_IO parameter is unchecked (0), which indicates that individual interrupt lines appear on the I/O.
Active State: High. Polarity is set by the configuration parameter IC_INTR_POL (checked(1) = active high).
SynchronousTo: pclk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ic_rd_req_intr</ipxact:name>
        <ipxact:description>Optional. Slave read request interrupt. This signal is included on the interface when the configuration IC_INTR_IO parameter is unchecked (0), which indicates that individual interrupt lines appear on the I/O.
Active State: High. Polarity is set by the configuration parameter IC_INTR_POL (checked(1) = active high).
SynchronousTo: pclk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ic_rx_done_intr</ipxact:name>
        <ipxact:description>Optional. Receive done active high interrupt. This signal is included on the interface when the configuration IC_INTR_IO parameter is unchecked (0), which indicates that individual interrupt lines appear on the I/O.
Active State: High. Polarity is set by the configuration parameter IC_INTR_POL (checked(1) = active high).
SynchronousTo: pclk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ic_rx_full_intr</ipxact:name>
        <ipxact:description>Optional. Receive buffer full active high interrupt. This signal is included on the interface when the configuration IC_INTR_IO parameter is unchecked (0), which indicates that individual interrupt lines appear on the I/O. 
 When bit 0 of the IC_ENABLE register is 0, the RX FIFO is flushed and held in resetthe RX FIFO is not fullso this ic_rx_full_intr bit is cleared once the ic_enable bit is programmed with a 0, regardless of the activity that continues.
Active State: High. Polarity is set by the configuration parameter IC_INTR_POL (checked(1) = active high).
SynchronousTo: pclk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ic_rx_over_intr</ipxact:name>
        <ipxact:description>Optional. Receive buffer overflow active high interrupt. This signal is included on the interface when the configuration IC_INTR_IO parameter is unchecked (0), which indicates that individual interrupt lines appear on the I/O. 
 When the module is disabled, this interrupt keeps its level until the master or slave state machines go into idle and bit 0 of the IC_ENABLE register is 0. When ic_en goes to 0, this interrupt is cleared.
Active State: High. Polarity is set by the configuration parameter IC_INTR_POL (checked(1) = active high).
SynchronousTo: pclk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ic_rx_under_intr</ipxact:name>
        <ipxact:description>Optional. Receive buffer underflow active high interrupt. This signal is included on the interface when the configuration IC_INTR_IO parameter is unchecked (0), which indicates that individual interrupt lines appear on the I/O. 
 When the module is disabled, this interrupt keeps its level until the master or slave state machines go into idle and bit 0 of the IC_ENABLE register is 0. When ic_en goes to 0, this interrupt is cleared.
Active State: High. Polarity is set by the configuration parameter IC_INTR_POL (checked(1) = active high).
SynchronousTo: pclk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ic_start_det_intr</ipxact:name>
        <ipxact:description>Optional. Start condition detect on I2C active high interrupt. This signal is included on the interface when the configuration IC_INTR_IO parameter is unchecked (0), which indicates that individual interrupt lines appear on the I/O.
Active State: High. Polarity is set by the configuration parameter IC_INTR_POL (checked(1) = active high).
SynchronousTo: pclk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ic_stop_det_intr</ipxact:name>
        <ipxact:description>Optional. Stop condition detect on I2C active high interrupt. This signal is included on the interface when the configuration IC_INTR_IO parameter is unchecked (0), which indicates that individual interrupt lines appear on the I/O.
Active State: High. Polarity is set by the configuration parameter IC_INTR_POL (checked(1) = active high).
SynchronousTo: pclk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ic_tx_abrt_intr</ipxact:name>
        <ipxact:description>Optional. Transmit abort active high interrupt.
Active State: High. Polarity is set by the configuration parameter IC_INTR_POL (checked(1) = active high).
SynchronousTo: pclk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ic_tx_empty_intr</ipxact:name>
        <ipxact:description>Optional. Transmit buffer empty active high interrupt. This signal is included on the interface when the configuration IC_INTR_IO parameter is unchecked (0), which indicates that individual interrupt lines appear on the I/O. 
 When bit 0 of the IC_ENABLE register is 0, the TX FIFO is flushed and held in reset, where it looks like it has no data within it. The ic_tx_empty_intr bit is raised when bit 0 of the IC_ENABLE register is 0, provided there is activity in the master or slave state machines. When there is no longer activity, then this interrupt bit is masked with ic_en.
Active State: High. Polarity is set by the configuration parameter IC_INTR_POL (checked(1) = active high).
SynchronousTo: pclk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ic_tx_over_intr</ipxact:name>
        <ipxact:description>Optional. Transmit buffer overflow active high interrupt. This signal is included on the interface when the configuration IC_INTR_IO parameter is unchecked (0), which indicates that individual interrupt lines appear on the I/O. 
 When the module is disabled, this interrupt keeps its level until the master or slave state machines go into idle and bit 0 of the IC_ENABLE register is 0. When ic_en goes to 0, this interrupt is cleared.
Active State: High. Polarity is set by the configuration parameter IC_INTR_POL (checked(1) = active high).
SynchronousTo: pclk
PowerDomain: SINGLE_DOMAIN
RegisteredBy: Yes</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
    </ipxact:ports>
  </ipxact:model>
  <ipxact:choices>
    <ipxact:choice>
      <ipxact:name>SLAVE_INTERFACE_TYPE</ipxact:name>
      <ipxact:enumeration text="APB2">0</ipxact:enumeration>
      <ipxact:enumeration text="APB3">1</ipxact:enumeration>
      <ipxact:enumeration text="APB4">2</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>SLVERR_RESP_EN</ipxact:name>
      <ipxact:enumeration text="false">0</ipxact:enumeration>
      <ipxact:enumeration text="true">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_ULTRA_FAST_MODE</ipxact:name>
      <ipxact:enumeration text="false">0x0</ipxact:enumeration>
      <ipxact:enumeration text="true">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_CLK_FREQ_OPTIMIZATION</ipxact:name>
      <ipxact:enumeration text="false">0x0</ipxact:enumeration>
      <ipxact:enumeration text="true">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_SMBUS</ipxact:name>
      <ipxact:enumeration text="false">0x0</ipxact:enumeration>
      <ipxact:enumeration text="true">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_ADD_ENCODED_PARAMS</ipxact:name>
      <ipxact:enumeration text="false">0x0</ipxact:enumeration>
      <ipxact:enumeration text="true">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>APB_DATA_WIDTH</ipxact:name>
      <ipxact:enumeration text="8">8</ipxact:enumeration>
      <ipxact:enumeration text="16">16</ipxact:enumeration>
      <ipxact:enumeration text="32">32</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_MAX_SPEED_MODE</ipxact:name>
      <ipxact:enumeration text="Standard Mode">0x1</ipxact:enumeration>
      <ipxact:enumeration text="Fast Mode or Fast Mode Plus">0x2</ipxact:enumeration>
      <ipxact:enumeration text="High Speed Mode">0x3</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_10BITADDR_MASTER</ipxact:name>
      <ipxact:enumeration text="false">0x0</ipxact:enumeration>
      <ipxact:enumeration text="true">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_RESTART_EN</ipxact:name>
      <ipxact:enumeration text="false">0x0</ipxact:enumeration>
      <ipxact:enumeration text="true">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_10BITADDR_SLAVE</ipxact:name>
      <ipxact:enumeration text="false">0x0</ipxact:enumeration>
      <ipxact:enumeration text="true">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_MASTER_MODE</ipxact:name>
      <ipxact:enumeration text="false">0x0</ipxact:enumeration>
      <ipxact:enumeration text="true">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_SLAVE_DISABLE</ipxact:name>
      <ipxact:enumeration text="false">0x0</ipxact:enumeration>
      <ipxact:enumeration text="true">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_INTR_POL</ipxact:name>
      <ipxact:enumeration text="false">0x0</ipxact:enumeration>
      <ipxact:enumeration text="true">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_INTR_IO</ipxact:name>
      <ipxact:enumeration text="false">0x0</ipxact:enumeration>
      <ipxact:enumeration text="true">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_HAS_DMA</ipxact:name>
      <ipxact:enumeration text="false">0x0</ipxact:enumeration>
      <ipxact:enumeration text="true">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_USE_COUNTS</ipxact:name>
      <ipxact:enumeration text="false">0x0</ipxact:enumeration>
      <ipxact:enumeration text="true">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_CAP_LOADING</ipxact:name>
      <ipxact:enumeration text="100">100</ipxact:enumeration>
      <ipxact:enumeration text="400">400</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_HC_COUNT_VALUES</ipxact:name>
      <ipxact:enumeration text="false">0x0</ipxact:enumeration>
      <ipxact:enumeration text="true">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_CLK_TYPE</ipxact:name>
      <ipxact:enumeration text="Identical">0x0</ipxact:enumeration>
      <ipxact:enumeration text="Asynchronous">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_HAS_ASYNC_FIFO</ipxact:name>
      <ipxact:enumeration text="false">0x0</ipxact:enumeration>
      <ipxact:enumeration text="true">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>I2C_DYNAMIC_TAR_UPDATE</ipxact:name>
      <ipxact:enumeration text="false">0</ipxact:enumeration>
      <ipxact:enumeration text="true">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_SLV_DATA_NACK_ONLY</ipxact:name>
      <ipxact:enumeration text="false">0x0</ipxact:enumeration>
      <ipxact:enumeration text="true">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_RX_FULL_GEN_NACK</ipxact:name>
      <ipxact:enumeration text="false">0x0</ipxact:enumeration>
      <ipxact:enumeration text="true">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_EMPTYFIFO_HOLD_MASTER_EN</ipxact:name>
      <ipxact:enumeration text="false">0</ipxact:enumeration>
      <ipxact:enumeration text="true">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_DEFAULT_ACK_GENERAL_CALL</ipxact:name>
      <ipxact:enumeration text="false">0x0</ipxact:enumeration>
      <ipxact:enumeration text="true">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_RX_FULL_HLD_BUS_EN</ipxact:name>
      <ipxact:enumeration text="false">0x0</ipxact:enumeration>
      <ipxact:enumeration text="true">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_SLV_RESTART_DET_EN</ipxact:name>
      <ipxact:enumeration text="false">0x0</ipxact:enumeration>
      <ipxact:enumeration text="true">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_STOP_DET_IF_MASTER_ACTIVE</ipxact:name>
      <ipxact:enumeration text="false">0x0</ipxact:enumeration>
      <ipxact:enumeration text="true">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_STAT_FOR_CLK_STRETCH</ipxact:name>
      <ipxact:enumeration text="false">0x0</ipxact:enumeration>
      <ipxact:enumeration text="true">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_TX_CMD_BLOCK</ipxact:name>
      <ipxact:enumeration text="false">0x0</ipxact:enumeration>
      <ipxact:enumeration text="true">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_TX_CMD_BLOCK_DEFAULT</ipxact:name>
      <ipxact:enumeration text="false">0x0</ipxact:enumeration>
      <ipxact:enumeration text="true">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_FIRST_DATA_BYTE_STATUS</ipxact:name>
      <ipxact:enumeration text="false">0x0</ipxact:enumeration>
      <ipxact:enumeration text="true">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_AVOID_RX_FIFO_FLUSH_ON_TX_ABRT</ipxact:name>
      <ipxact:enumeration text="false">0x0</ipxact:enumeration>
      <ipxact:enumeration text="true">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_BUS_CLEAR_FEATURE</ipxact:name>
      <ipxact:enumeration text="false">0x0</ipxact:enumeration>
      <ipxact:enumeration text="true">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_DEVICE_ID</ipxact:name>
      <ipxact:enumeration text="false">0x0</ipxact:enumeration>
      <ipxact:enumeration text="true">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_SMBUS_SUSPEND_ALERT</ipxact:name>
      <ipxact:enumeration text="false">0x0</ipxact:enumeration>
      <ipxact:enumeration text="true">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_OPTIONAL_SAR</ipxact:name>
      <ipxact:enumeration text="false">0x0</ipxact:enumeration>
      <ipxact:enumeration text="true">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>IC_PERSISTANT_SLV_ADDR_DEFAULT</ipxact:name>
      <ipxact:enumeration text="0x0">0x0</ipxact:enumeration>
      <ipxact:enumeration text="0x1">0x1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>REG_TIMEOUT_WIDTH</ipxact:name>
      <ipxact:enumeration text="0">0</ipxact:enumeration>
      <ipxact:enumeration text="4">4</ipxact:enumeration>
      <ipxact:enumeration text="5">5</ipxact:enumeration>
      <ipxact:enumeration text="6">6</ipxact:enumeration>
      <ipxact:enumeration text="7">7</ipxact:enumeration>
      <ipxact:enumeration text="8">8</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>HC_REG_TIMEOUT_VALUE</ipxact:name>
      <ipxact:enumeration text="false">0</ipxact:enumeration>
      <ipxact:enumeration text="true">1</ipxact:enumeration>
    </ipxact:choice>
  </ipxact:choices>
  <ipxact:fileSets>
    <ipxact:fileSet>
      <ipxact:name>Hdl</ipxact:name>
      <ipxact:file>
        <ipxact:name>/home/liubin/project/dw_iip/i_i2c_1/src/DW_apb_i2c_cc_constants.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/liubin/project/dw_iip/i_i2c_1/src/DW_apb_i2c_bcm_params.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/liubin/project/dw_iip/i_i2c_1/src/DW_apb_i2c_bcm57.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/liubin/project/dw_iip/i_i2c_1/src/DW_apb_i2c_bcm21.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/liubin/project/dw_iip/i_i2c_1/src/DW_apb_i2c_bcm41.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/liubin/project/dw_iip/i_i2c_1/src/DW_apb_i2c_bcm47.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/liubin/project/dw_iip/i_i2c_1/src/DW_apb_i2c_bcm06.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/liubin/project/dw_iip/i_i2c_1/src/DW_apb_i2c_bcm05.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/liubin/project/dw_iip/i_i2c_1/src/DW_apb_i2c_bcm07.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/liubin/project/dw_iip/i_i2c_1/src/DW_apb_i2c_regs.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/liubin/project/dw_iip/i_i2c_1/src/DW_apb_i2c_tog.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/liubin/project/dw_iip/i_i2c_1/src/DW_apb_i2c_bcm99.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/liubin/project/dw_iip/i_i2c_1/src/DW_apb_i2c_biu.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/liubin/project/dw_iip/i_i2c_1/src/DW_apb_i2c_regfile.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/liubin/project/dw_iip/i_i2c_1/src/DW_apb_i2c_fifo.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/liubin/project/dw_iip/i_i2c_1/src/DW_apb_i2c_async_fifo.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/liubin/project/dw_iip/i_i2c_1/src/DW_apb_i2c_intctl.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/liubin/project/dw_iip/i_i2c_1/src/DW_apb_i2c_rx_filter.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/liubin/project/dw_iip/i_i2c_1/src/DW_apb_i2c_clk_gen.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/liubin/project/dw_iip/i_i2c_1/src/DW_apb_i2c_mstfsm.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/liubin/project/dw_iip/i_i2c_1/src/DW_apb_i2c_sync.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/liubin/project/dw_iip/i_i2c_1/src/DW_apb_i2c_slvfsm.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/liubin/project/dw_iip/i_i2c_1/src/DW_apb_i2c_tx_shift.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/liubin/project/dw_iip/i_i2c_1/src/DW_apb_i2c_rx_shift.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/liubin/project/dw_iip/i_i2c_1/src/DW_apb_i2c_toggle.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/liubin/project/dw_iip/i_i2c_1/src/DW_apb_i2c_dma.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/liubin/project/dw_iip/i_i2c_1/src/DW_apb_i2c.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/liubin/project/dw_iip/i_i2c_1/src/DW_apb_i2c-undef.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
    </ipxact:fileSet>
  </ipxact:fileSets>
  <ipxact:parameters>
    <ipxact:parameter choiceRef="SLAVE_INTERFACE_TYPE" configGroups="BasicConfig_systemConfig" parameterId="SLAVE_INTERFACE_TYPE" prompt="Register Interface Type" resolve="immediate" type="longint">
      <ipxact:name>SLAVE_INTERFACE_TYPE</ipxact:name>
      <ipxact:description>Select Register Interface type as APB2, APB3 or APB4.
By default, DW_apb_i2c supports APB2 interface.</ipxact:description>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="SLVERR_RESP_EN" configGroups="BasicConfig_systemConfig" maximum="1" minimum="0" parameterId="SLVERR_RESP_EN" prompt="Slave Error Response Enable" resolve="immediate" type="longint">
      <ipxact:name>SLVERR_RESP_EN</ipxact:name>
      <ipxact:description>Enable Slave Error response signaling:The component will refrain
From signaling an error response if this parameter is disabled.</ipxact:description>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_ULTRA_FAST_MODE" configGroups="I2C_6_0_I2C_6_dot_0" parameterId="IC_ULTRA_FAST_MODE" prompt="Enable Ultra-Fast Mode?" resolve="immediate" type="bit">
      <ipxact:name>IC_ULTRA_FAST_MODE</ipxact:name>
      <ipxact:description>This parameter is used to control whether DW_apb_i2c supports Ultra-Fast speed mode or not.

If this Parameter is enabled, the Master
 - Disables the Arbitration, clock synchronization features.
 - Support only write transfers.
 - Does not check the validity of ACK/NACK for each byte.
The Slave 
 - Supports only write transfers.
 - Disables the logic to generate ACK/NACK after the end of each byte.
 - Disables the logic to stretch the clock if RX-FIFO is full.</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_CLK_FREQ_OPTIMIZATION" configGroups="BasicConfig_AddFeatures" parameterId="IC_CLK_FREQ_OPTIMIZATION" prompt="Enable IC_CLK Frequency Reduction?" resolve="immediate" type="bit">
      <ipxact:name>IC_CLK_FREQ_OPTIMIZATION</ipxact:name>
      <ipxact:description>This parameter is used to reduce the system clock frequency (ic_clk) 
by reducing the internal latency required to generate the high period 
and low period of the SCL line.</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_SMBUS" configGroups="SMBus_PMBus_Smbus_mode" parameterId="IC_SMBUS" prompt="Enable SMBus Mode?" resolve="immediate" type="bit">
      <ipxact:name>IC_SMBUS</ipxact:name>
      <ipxact:description>Controls whether DW_apb_i2c Master/Slave supports SMBus mode.
If checked, the DW_apb_i2c includes the SMBus mode related registers, real-time checks, 
timeout interrupts, and SMBus optional signals.

Note: If this parameter is selected (1), then the user can set the parameter
IC_MAX_SPEED_MODE to Standard mode(1) or Fast Mode/Fast Mode Plus (2).</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_ADD_ENCODED_PARAMS" configGroups="BasicConfig_intConfig" parameterId="IC_ADD_ENCODED_PARAMS" prompt="Add Encoded Parameters" resolve="immediate" type="bit">
      <ipxact:name>IC_ADD_ENCODED_PARAMS</ipxact:name>
      <ipxact:description>Adding the encoded parameters gives firmware an easy and quick 
way of identifying the DesignWare component within an I/O memory 
map. Some critical design-time options determine how a driver 
should interact with the peripheral. There is a minimal area 
overhead by including these parameters. Allows a single driver 
to be developed for each component which will be self-configurable.

When bit 7 of the IC_COMP_PARAM_1 is read and contains a '1' 
the encoded parameters can be read via software. If this bit 
is a '0' then the entire register is '0' regardless of the 
setting of any of the other parameters that are encoded in 
the register's bits.  For details about this register,
see the IC_COMP_PARAM_1 register.

Note: Unique drivers must be developed for each configuration of the
DW_apb_i2c. Based on the configuration, the registers in the IP can differ; 
thus the same driver cannot be used with different configurations of the IP.</ipxact:description>
      <ipxact:value>'h1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="APB_DATA_WIDTH" configGroups="BasicConfig_systemConfig" parameterId="APB_DATA_WIDTH" prompt="APB data bus width" resolve="immediate" type="longint">
      <ipxact:name>APB_DATA_WIDTH</ipxact:name>
      <ipxact:description>Width of the APB data bus.</ipxact:description>
      <ipxact:value>32</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_MAX_SPEED_MODE" configGroups="BasicConfig_modeConfig" parameterId="IC_MAX_SPEED_MODE" prompt="Highest speed I2C mode supported" resolve="immediate" type="bit">
      <ipxact:name>IC_MAX_SPEED_MODE</ipxact:name>
      <ipxact:description>Maximum I2C mode supported.
Controls the reset value of the SPEED bit field [2:1] of the I2C Control Register (IC_CON).
Count registers are used to generate the outgoing clock SCL on the I2C interface. 
For speed modes faster than the configured maximum speed mode, the corresponding
registers are not present in the top-level RTL.

For unsupported speed modes those registers are not present as described below.
 - If this parameter is set to "Standard Mode" then the IC_FS_SCL_*, IC_HS_MADDR, and IC_HS_SCL_* registers are not present.
 - If this parameter is set to "Fast Mode" then the IC_HS_MADDR, and IC_HS_SCL_* registers are not present.</ipxact:description>
      <ipxact:value>'h3</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_10BITADDR_MASTER" configGroups="BasicConfig_modeConfig" parameterId="IC_10BITADDR_MASTER" prompt="Supports 10-bit addressing in master mode?" resolve="immediate" type="bit">
      <ipxact:name>IC_10BITADDR_MASTER</ipxact:name>
      <ipxact:description>Controls whether DW_apb_i2c supports 7 or 10 bit addressing on the I2C 
interface after reset when acting as a master. 
Controls reset value of part of Register IC_CON. 
Master generated transfers will use this number of address bits. Additionally, it 
can be reprogrammed by software by writing to the IC_CON register.</ipxact:description>
      <ipxact:value>'h1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_RESTART_EN" configGroups="BasicConfig_modeConfig" parameterId="IC_RESTART_EN" prompt="Allow re-start conditions to be sent when acting as a master?" resolve="immediate" type="bit">
      <ipxact:name>IC_RESTART_EN</ipxact:name>
      <ipxact:description>Controls the reset value of bit 5 (IC_RESTART_EN) in the
IC_CON register. By default, this parameter is checked, which allows
RESTART conditions to be sent when DW_apb_i2c is acting as a master.
Some older slaves do not support handling RESTART conditions; however,
RESTART conditions are used in several I2C operations. When the RESTART
is disabled, the DW_apb_i2c master is incapable of performing the following
functions:
 - Sending a START BYTE
 - Performing any high-speed mode operation
 - Performing direction changes in combined format mode
 - Performing a read operation with a 10-bit address</ipxact:description>
      <ipxact:value>'h1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_10BITADDR_SLAVE" configGroups="BasicConfig_modeConfig" parameterId="IC_10BITADDR_SLAVE" prompt="Supports 10-bit addressing in slave mode?" resolve="immediate" type="bit">
      <ipxact:name>IC_10BITADDR_SLAVE</ipxact:name>
      <ipxact:description>Controls whether DW_apb_i2c slave supports 7 or 10 bit addressing on the I2C 
interface after reset when acting as a slave.  
Controls reset value of part of Register IC_CON. 
The DW_apb_i2c module will respond to this number of address bits when
acting as a slave; it can be reprogrammed by software.</ipxact:description>
      <ipxact:value>'h1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_MASTER_MODE" configGroups="BasicConfig_modeConfig" parameterId="IC_MASTER_MODE" prompt="Is an I2C Master?" resolve="immediate" type="bit">
      <ipxact:name>IC_MASTER_MODE</ipxact:name>
      <ipxact:description>Controls whether DW_apb_i2c has its master enabled to be a master after reset. 
This parameter controls the reset value of bit 0 of the I2C Control 
Register (IC_CON). To enable the component to be a master, you must 
write a 1 in bit 0 of the IC_CON register. 

Note: If this parameter is checked (1), then you must ensure that the 
parameter IC_SLAVE_DISABLE is checked (1) as well.</ipxact:description>
      <ipxact:value>'h1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_SLAVE_DISABLE" configGroups="BasicConfig_modeConfig" parameterId="IC_SLAVE_DISABLE" prompt="Disable Slave after reset?" resolve="immediate" type="bit">
      <ipxact:name>IC_SLAVE_DISABLE</ipxact:name>
      <ipxact:description>Controls whether DW_apb_i2c has its slave enabled or disabled after reset.
If checked, the DW_apb_i2c slave interface is disabled after reset.
The slave also can be disabled by programming a 1 into IC_CON[6].
By default the slave is enabled.

Note: If this parameter is unchecked (0), then you must ensure that the
parameter IC_MASTER_MODE is unchecked (0) as well.</ipxact:description>
      <ipxact:value>'h1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="BasicConfig_modeConfig" parameterId="IC_DEFAULT_SLAVE_ADDR" prompt="Has I2C default slave address of?" resolve="immediate" type="bit">
      <ipxact:name>IC_DEFAULT_SLAVE_ADDR</ipxact:name>
      <ipxact:description>Reset Value of DW_apb_i2c Slave Address. 
Controls the reset value of Register (IC_SAR). 
The default values cannot be any of the reserved 
address locations: 0x00 to 0x07 or 0x78 to 0x7f.</ipxact:description>
      <ipxact:value>'h033</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="BasicConfig_modeConfig" parameterId="IC_DEFAULT_TAR_SLAVE_ADDR" prompt="Has I2C default target slave address of?" resolve="immediate" type="bit">
      <ipxact:name>IC_DEFAULT_TAR_SLAVE_ADDR</ipxact:name>
      <ipxact:description>Reset value of DW_apb_i2c target slave address. Controls the reset value 
of the IC_TAR bit field (9:0) of the I2C Target Address Register (IC_TAR). 
The default values cannot be any of the reserved address locations:
0x00 to 0x07 or 0x78 to 0x7f.</ipxact:description>
      <ipxact:value>'h033</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="BasicConfig_modeConfig" parameterId="IC_HS_MASTER_CODE" prompt="Has High Speed mode master code of?" resolve="immediate" type="bit">
      <ipxact:name>IC_HS_MASTER_CODE</ipxact:name>
      <ipxact:description>High Speed mode master code of the DW_apb_i2c block.
Controls the reset value of I2C HS Master Mode Code Address Register (IC_HS_MADDR).
This is a unique code that alerts other masters on the I2C 
bus that a high-speed mode transfer is going to begin. For more information
about this code, refer to "Multiple Master Arbitration" section in data
book.</ipxact:description>
      <ipxact:value>'h1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="BasicConfig_modeConfig" maximum="256" minimum="2" parameterId="IC_TX_BUFFER_DEPTH" prompt="Depth of transmit buffer is?" resolve="immediate" type="longint">
      <ipxact:name>IC_TX_BUFFER_DEPTH</ipxact:name>
      <ipxact:description>Depth of transmit buffer. The buffer is 9 bits wide;
8 bits for the data, and 1 bit for the read or write command.</ipxact:description>
      <ipxact:value>8</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="BasicConfig_modeConfig" maximum="256" minimum="2" parameterId="IC_RX_BUFFER_DEPTH" prompt="Depth of receive buffer is?" resolve="immediate" type="longint">
      <ipxact:name>IC_RX_BUFFER_DEPTH</ipxact:name>
      <ipxact:description>Depth of receive buffer, the buffer is 8 bits wide.</ipxact:description>
      <ipxact:value>8</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_INTR_POL" configGroups="BasicConfig_extConfig" parameterId="IC_INTR_POL" prompt="Polarity of Interrupts is active high?" resolve="immediate" type="bit">
      <ipxact:name>IC_INTR_POL</ipxact:name>
      <ipxact:description>Configures the active level of the output interrupt lines.</ipxact:description>
      <ipxact:value>'h1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_INTR_IO" configGroups="BasicConfig_extConfig" parameterId="IC_INTR_IO" prompt="Single Interrupt output port present?" resolve="immediate" type="bit">
      <ipxact:name>IC_INTR_IO</ipxact:name>
      <ipxact:description>If unchecked, each interrupt source has its own output. If
checked, all interrupt sources are combined into a single output.</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_HAS_DMA" configGroups="BasicConfig_extConfig" parameterId="IC_HAS_DMA" prompt="Include DMA handshaking interface signals?" resolve="immediate" type="bit">
      <ipxact:name>IC_HAS_DMA</ipxact:name>
      <ipxact:description>Configures the inclusion of DMA handshaking interface signals.
When checked, includes the DMA handshaking interface signals
at the top-level I/O. For more information about these signals, 
see "Signal Descriptions" in data book.</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="BasicConfig_modeConfig" parameterId="IC_TX_TL" prompt="Transmit buffer threshold value is?" resolve="immediate" type="bit">
      <ipxact:name>IC_TX_TL</ipxact:name>
      <ipxact:description>Reset value for threshold level of transmit buffer.
This parameter controls the reset value of the I2C 
Transmit FIFO Threshold Level Register (IC_TX_TL).</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="BasicConfig_modeConfig" parameterId="IC_RX_TL" prompt="Receive buffer threshold value is?" resolve="immediate" type="bit">
      <ipxact:name>IC_RX_TL</ipxact:name>
      <ipxact:description>Reset value for threshold level of receive buffer.
This parameter controls the reset value of the I2C 
Receive FIFO Threshold Level Register (IC_RX_TL).</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_USE_COUNTS" configGroups="BasicConfig_intConfig" parameterId="IC_USE_COUNTS" prompt="Specify clock counts directly instead of supplying clock frequency?" resolve="immediate" type="bit">
      <ipxact:name>IC_USE_COUNTS</ipxact:name>
      <ipxact:description>Determines whether *CNT values are provided directly or by specifying the ic_clk 
clock frequency and letting coreConsultant (or coreAssembler) calculate the count values.

When this parameter is checked, the reset values of the *CNT registers are specified by
the corresponding *COUNT configuration parameters which may be user-defined or derived 
(see standard, fast, fast mode plus, and high speed mode parameters later in this table). 

When unchecked (default setting), the reset values of the *CNT registers are calculated
from the configuration parameter IC_CLOCK_PERIOD.

Note: For fast mode plus, reprogram the IC_FS_SCL_*CNT register to achieve
the required data rate when unchecked.</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="BasicConfig_intConfig" minimum="2" parameterId="IC_CLOCK_PERIOD" prompt="ic_clk has a period of? (ns integers only)" resolve="immediate" type="longint">
      <ipxact:name>IC_CLOCK_PERIOD</ipxact:name>
      <ipxact:description>Specifies the period of incoming ic_clk, used to generate outgoing I2C
interface SCL clock. (ns integers only)

When the count values are used to generate the IC_CLOCK_PERIOD then
the IC_MAX_SPEED_MODE setting determines the actual period

  IC_MAX_SPEED_MODE = Standard =&gt; 500ns

  IC_MAX_SPEED_MODE = Fast     =&gt; 100ns

  IC_MAX_SPEED_MODE = High     =&gt; 10ns

  IC_ULTRA_FAST_MODE = 1       =&gt; 25ns

Note: For fast mode plus, user has to reprogram the IC_FS_SCL_*CNT register to achieve required data rate.</ipxact:description>
      <ipxact:value>10</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="BasicConfig_StandardMode" parameterId="IC_SS_SCL_HIGH_COUNT" prompt="Std speed SCL high count is?" resolve="immediate" type="bit">
      <ipxact:name>IC_SS_SCL_HIGH_COUNT</ipxact:name>
      <ipxact:description>Reset value of Standard Speed I2C Clock SCL High Count
register (IC_SS_SCL_HCNT). The value must be calculated 
based on the I2C data rate desired and I2C clock frequency. 
When parameter IC_USE_COUNTS = 0, this parameter is automatically calculated using the 
IC_CLOCK_PERIOD parameter. For more information, see the IC_SS_SCL_HCNT register.</ipxact:description>
      <ipxact:value>'h0190</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="BasicConfig_StandardMode" parameterId="IC_SS_SCL_LOW_COUNT" prompt="Std speed SCL low count is?" resolve="immediate" type="bit">
      <ipxact:name>IC_SS_SCL_LOW_COUNT</ipxact:name>
      <ipxact:description>Reset value of Standard Speed I2C Clock SCL High Count register (IC_SS_SCL_HCNT).
Value must be calculated based on I2C data rate desired and I2C clock frequency.
When parameter IC_USE_COUNTS = 0, this parameter is automatically calculated using 
the IC_CLOCK_PERIOD parameter. For more information, see IC_SS_SCL_LCNT register.</ipxact:description>
      <ipxact:value>'h01d6</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="BasicConfig_FastMode" parameterId="IC_FS_SCL_HIGH_COUNT" prompt="Fast speed SCL high count is?" resolve="immediate" type="bit">
      <ipxact:name>IC_FS_SCL_HIGH_COUNT</ipxact:name>
      <ipxact:description>Reset value of Fast Mode or Fast Mode Plus I2C Clock SCL High Count register (IC_FS_SCL_HCNT).
The value must be calculated based on I2C data rate desired and I2C clock frequency.
When parameter IC_USE_COUNTS = 0, this parameter is automatically calculated using 
the IC_CLOCK_PERIOD parameter. For more information, see IC_FS_SCL_HCNT register.</ipxact:description>
      <ipxact:value>'h003c</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="BasicConfig_FastMode" parameterId="IC_FS_SCL_LOW_COUNT" prompt="Fast speed SCL low count is?" resolve="immediate" type="bit">
      <ipxact:name>IC_FS_SCL_LOW_COUNT</ipxact:name>
      <ipxact:description>Reset value of Fast Mode or Fast Mode Plus I2C Clock SCL Low Count register (IC_FS_SCL_LCNT).
The value must be calculated based on I2C data rate desired and I2C clock frequency.
When parameter IC_USE_COUNTS = 0, this parameter is automatically calculated using 
the IC_CLOCK_PERIOD parameter. For more information, see the IC_FS_SCL_LCNT register</ipxact:description>
      <ipxact:value>'h0082</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_CAP_LOADING" configGroups="BasicConfig_HighSpeed" parameterId="IC_CAP_LOADING" prompt="For high speed mode systems the I2C bus loading is? (pF)" resolve="immediate" type="longint">
      <ipxact:name>IC_CAP_LOADING</ipxact:name>
      <ipxact:description>For high speed mode, the bus loading affects the high and low
pulse width of SCL.</ipxact:description>
      <ipxact:value>100</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="BasicConfig_HighSpeed" parameterId="IC_HS_SCL_HIGH_COUNT" prompt="High speed SCL high count is?" resolve="immediate" type="bit">
      <ipxact:name>IC_HS_SCL_HIGH_COUNT</ipxact:name>
      <ipxact:description>Reset value of High Speed I2C Clock SCL High Count register (IC_HS_SCL_HCNT).
The value must be calculated based on I2C data rate desired and high speed
I2C clock frequency. When parameter IC_USE_COUNTS = 0, this parameter is 
automatically calculated using the IC_CLOCK_PERIOD parameter. 
For more information, see IC_HS_SCL_HCNT register.</ipxact:description>
      <ipxact:value>'h0006</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="BasicConfig_HighSpeed" parameterId="IC_HS_SCL_LOW_COUNT" prompt="High speed SCL low count is?" resolve="immediate" type="bit">
      <ipxact:name>IC_HS_SCL_LOW_COUNT</ipxact:name>
      <ipxact:description>Reset value of High Speed I2C Clock SCL Low Count register (IC_HS_SCL_LCNT).
The value must be calculated based on I2C data rate and I2C clock
frequency.
When parameter IC_USE_COUNTS = 0, this parameter is automatically calculated using 
the IC_CLOCK_PERIOD parameter. For more information, see IC_HS_SCL_LCNT register.</ipxact:description>
      <ipxact:value>'h0010</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_HC_COUNT_VALUES" configGroups="BasicConfig_intConfig" parameterId="IC_HC_COUNT_VALUES" prompt="Hard code the count values for each mode?" resolve="immediate" type="bit">
      <ipxact:name>IC_HC_COUNT_VALUES</ipxact:name>
      <ipxact:description>By checking this parameter, the *CNT registers are set to read
only. Unchecking this parameter (default setting) allows the *CNT registers to
be writable.

Regardless of the setting, the *CNT registers are always readable and
have reset values from the corresponding *COUNT configuration parameters, which
may be user defined or derived (see standard, fast, fast mode plus, or high
speed mode parameters later in this table).

Note: Since the DW_apb_i2c uses the same high and low count registers for fast mode and fast mode plus operation, 
if this parameter is checked (1) the IC_FS_SCL_*CNT registers are hard coded to either one of the fast mode and fast mode plus. 
Consequently, DW_apb_i2c can operate in either fast mode or fast mode plus, but not in both modes simultaneously.

For fast mode plus, it is recommended that this parameter be Unchecked (0).</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_CLK_TYPE" configGroups="BasicConfig_intConfig" parameterId="IC_CLK_TYPE" prompt="Relationship between pclk and ic_clk is?" resolve="immediate" type="bit">
      <ipxact:name>IC_CLK_TYPE</ipxact:name>
      <ipxact:description>Specifies the relationship between pclk and ic_clk

Identical (0): clocks are identical; no meta-stability flops
used for data passing between clock domains.

Asynchronous (1): clocks may be completely asynchronous to
each other, meta-stability flops are required for data passing between clock domains.</ipxact:description>
      <ipxact:value>'h1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_HAS_ASYNC_FIFO" configGroups="BasicConfig_intConfig" parameterId="IC_HAS_ASYNC_FIFO" prompt="Enable Async FIFO Mode?" resolve="immediate" type="bit">
      <ipxact:name>IC_HAS_ASYNC_FIFO</ipxact:name>
      <ipxact:description>This parameter controls whether DW_apb_i2c consist of Asynchronous or Synchronous
FIFO's for the Transmit and Receive Data Buffers.</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="I2C_DYNAMIC_TAR_UPDATE" configGroups="BasicConfig_AddFeatures" maximum="1" minimum="0" parameterId="I2C_DYNAMIC_TAR_UPDATE" prompt="Allow dynamic updating of the TAR address?" resolve="immediate" type="longint">
      <ipxact:name>I2C_DYNAMIC_TAR_UPDATE</ipxact:name>
      <ipxact:description>When checked, allows the IC_TAR register to be updated
dynamically. Setting this parameter affects the operation 
of DW_apb_i2c when it is in master mode. For more details, 
see "Master Mode Operation".</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_SLV_DATA_NACK_ONLY" configGroups="BasicConfig_AddFeatures" parameterId="IC_SLV_DATA_NACK_ONLY" prompt="Enable register to generate NACKs for data received by Slave?" resolve="immediate" type="bit">
      <ipxact:name>IC_SLV_DATA_NACK_ONLY</ipxact:name>
      <ipxact:description>Enables an additional register which controls whether the DW_apb_i2c generates a NACK
after a data byte has been transferred to it. This NACK generation only occurs when
the DW_apb_i2c is a Slave-Receiver. If this register is set to a value of 1, it can
only generate a NACK after a data byte is received; hence, the data transfer is aborted.
Also, the data received is not pushed to the receive buffer.

When the register is set to a value of 0, it generates NACK/ACK depending on 
normal criteria.
If this option is selected, the default value of the register IC_SLV_DATA_NACK_ONLY is always 0.
The register must be explicitly programmed to a value of 1 if NACKs are to be generated. The
register can only be written to successfully if DW_apb_i2c is disabled (IC_ENABLE[0] = 0) or the 
slave part is inactive (IC_STATUS[6] = 0).</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_RX_FULL_GEN_NACK" configGroups="BasicConfig_AddFeatures" parameterId="IC_RX_FULL_GEN_NACK" prompt="When Receive Fifo is Physically full, Generate NACK for data received by slave?" resolve="immediate" type="bit">
      <ipxact:name>IC_RX_FULL_GEN_NACK</ipxact:name>
      <ipxact:description>This parameter enables DW_apb_i2c in Slave mode to generate NACK for a data byte recieved 
when Receive FIFO is physically full. The new data byte will not be pushed to the Receive
FIFO, hence no overflow happens and rx_over interrupt will not be set.
This works only when DW_apb_i2c is in Slave/Receiver mode (data being written
to the slave) and is not applicable in Master mode.</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_EMPTYFIFO_HOLD_MASTER_EN" configGroups="BasicConfig_AddFeatures" maximum="1" minimum="0" parameterId="IC_EMPTYFIFO_HOLD_MASTER_EN" prompt="Hold transfer when Tx FIFO is empty" resolve="immediate" type="longint">
      <ipxact:name>IC_EMPTYFIFO_HOLD_MASTER_EN</ipxact:name>
      <ipxact:description>If this parameter is set, the master will only complete a transfer - that is issues a STOP - 
when it finds a Tx FIFO entry tagged with a Stop bit. If the Tx FIFO becomes
empty and the last byte does not have the Stop bit set, the master stalls
the transfer by holding the SCL line low.

If this parameter is not set, the master completes a transfer when the 
Tx FIFO is empty. In SMbus Mode (IC_SMBUS=1),
IC_EMPTYFIFO_HOLD_MASTER_EN should be always enabled.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="BasicConfig_modeConfig" parameterId="IC_DEFAULT_SDA_SETUP" prompt="Hardware reset value for IC_SDA_SETUP register" resolve="immediate" type="bit">
      <ipxact:name>IC_DEFAULT_SDA_SETUP</ipxact:name>
      <ipxact:description>Determines the reset value for the register IC_SDA_SETUP, which in
turn controls the time delay - in terms of number of ic_clk clock periods - introduced
in the rising edge of SCL, relative to SDA changing when a read-request is serviced.
The relevant I2C requirement is t[su:DAT] as detailed in the I2C Bus Specifications.</ipxact:description>
      <ipxact:value>'h64</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="BasicConfig_modeConfig" parameterId="IC_DEFAULT_SDA_HOLD" prompt="Hardware reset value for IC_SDA_HOLD register" resolve="immediate" type="bit">
      <ipxact:name>IC_DEFAULT_SDA_HOLD</ipxact:name>
      <ipxact:description>Determines the reset value for the register IC_SDA_HOLD, which in
turn controls the SDA hold time implemented by DW_apb_i2c (when
transmitting or receiving, as either master or slave)
as a master/slave transmitter or Master/Slave Reciever).
The relevant I2C requirement is t[HD:DAT] as detailed in the I2C Bus Specifications.

The programmed SDA hold time as transmitter cannot exceed at any time the
duration of the low part of scl. Therefore it is recommended that the configured
default value should not be larger than N_SCL_LOW-2, where N_SCL_LOW is
the duration of the low part of the scl period measured in ic_clk cycles, for the
maximum speed mode the component is configured for.</ipxact:description>
      <ipxact:value>'h000001</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_DEFAULT_ACK_GENERAL_CALL" configGroups="BasicConfig_modeConfig" parameterId="IC_DEFAULT_ACK_GENERAL_CALL" prompt="IC_ACK_GENERAL_CALL set to acknowledge I2C general calls on reset" resolve="immediate" type="bit">
      <ipxact:name>IC_DEFAULT_ACK_GENERAL_CALL</ipxact:name>
      <ipxact:description>This parameter determines the reset value for the register IC_ACK_GENERAL_CALL, which
in turn controls whether I2C general call addresses are to responded or not.</ipxact:description>
      <ipxact:value>'h1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_RX_FULL_HLD_BUS_EN" configGroups="BasicConfig_AddFeatures" parameterId="IC_RX_FULL_HLD_BUS_EN" prompt="When Receive Fifo is physically full, Hold the bus till Receive fifo has space avialable?" resolve="immediate" type="bit">
      <ipxact:name>IC_RX_FULL_HLD_BUS_EN</ipxact:name>
      <ipxact:description>When the Rx FIFO is physically full to its RX_BUFFER_DEPTH, 
this parameter provides a hardware method to hold the bus till Rx FIFO data 
is read out and there is a space available in the FIFO.
This parameter can be used when DW_apb_i2c is either a slave-receiver (that
is, data is written to the device) or a master-receiver (that is, the device reads
data from a slave).

Note: If parameter "IC_RX_FULL_GEN_NACK" is enabled, then setting this parameter
has no impact in slave-receiver mode since, the controller NACK's the Data byte if Rx-FIFO
has no empty space.
Note: If this parameter is checked, then the RX_OVER interrupt is never set to 1 
as the criteria to set this interrupt is never met. The RX_OVER interrupt can be found 
in IC_INTR_STAT and IC_RAW_INTR_STAT registers. It is also an optional output signal,
 ic_rx_over_intr(_n).</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_SLV_RESTART_DET_EN" configGroups="BasicConfig_AddFeatures" parameterId="IC_SLV_RESTART_DET_EN" prompt="Enable restart detect interrupt in slave mode?" resolve="immediate" type="bit">
      <ipxact:name>IC_SLV_RESTART_DET_EN</ipxact:name>
      <ipxact:description>When checked, allows the slave to detect and issue the restart interrupt when slave is 
addressed. Setting this parameter affects the operation of DW_apb_i2c only when it is in slave mode. 
This controls the "RESTART_DET" bit in the IC_RAW_INTR_STAT, IC_INTR_MASK, IC_INTR_STAT, 
and IC_CLR_RESTART_DET registers.This also controls the ic_restart_det_intr(_n) 
and ic_intr(_n) signals.</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_STOP_DET_IF_MASTER_ACTIVE" configGroups="BasicConfig_AddFeatures" parameterId="IC_STOP_DET_IF_MASTER_ACTIVE" prompt="Generate STOP_DET interrupt only if Master is active?" resolve="immediate" type="bit">
      <ipxact:name>IC_STOP_DET_IF_MASTER_ACTIVE</ipxact:name>
      <ipxact:description>Controls whether DW_apb_i2c generates STOP_DET interrupt when master is active:
 - Checked (1): Allows the master to detect and issue the stop interrupt when master is active.
 - Unchecked (0): The master always detects and issues the stop interrupt irrespective of whether it is active.
This parameter affects the operation of DW_apb_i2c when it is in master mode. 
This controls the STOP_DET bit of the IC_RAW_INTR_STAT, IC_INTR_MASK,  
IC_INTR_STAT and IC_CLR_STOP_DET registers. This also controls the ic_stop_det_intr(_n) and 
ic_intr(_n) signals.</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_STAT_FOR_CLK_STRETCH" configGroups="BasicConfig_AddFeatures" parameterId="IC_STAT_FOR_CLK_STRETCH" prompt="Include Status bits to indicate the reason for clock stretching?" resolve="immediate" type="bit">
      <ipxact:name>IC_STAT_FOR_CLK_STRETCH</ipxact:name>
      <ipxact:description>If this parameter is set, the DW_apb_i2c consists of status bits indicating
the reason for clock stretching in the IC_STATUS Register.</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_TX_CMD_BLOCK" configGroups="BasicConfig_AddFeatures" parameterId="IC_TX_CMD_BLOCK" prompt="Include programmable bit for blocking Master commands?" resolve="immediate" type="bit">
      <ipxact:name>IC_TX_CMD_BLOCK</ipxact:name>
      <ipxact:description>Controls whether DW_apb_i2c transmits data on I2C bus as soon as data is available in 
Tx FIFO. When checked, allows the master to hold the transmission of data on 
I2C bus when Tx FIFO has data to transmit.</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_TX_CMD_BLOCK_DEFAULT" configGroups="BasicConfig_AddFeatures" parameterId="IC_TX_CMD_BLOCK_DEFAULT" prompt="Enable blocking Master commands after reset?" resolve="immediate" type="bit">
      <ipxact:name>IC_TX_CMD_BLOCK_DEFAULT</ipxact:name>
      <ipxact:description>Controls whether DW_apb_i2c has its transmit command block enabled or disabled after reset.
If checked, the DW_apb_i2c blocks the transmission of data on I2C bus.</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_FIRST_DATA_BYTE_STATUS" configGroups="BasicConfig_AddFeatures" parameterId="IC_FIRST_DATA_BYTE_STATUS" prompt="Include First data byte indication in IC_DATA_CMD register?" resolve="immediate" type="bit">
      <ipxact:name>IC_FIRST_DATA_BYTE_STATUS</ipxact:name>
      <ipxact:description>Controls whether DW_apb_i2c generates FIRST_DATA_BYTE status bit in IC_DATA_CMD register.
When checked, the master/slave receiver to set the FIRST_DATA_BYTE status bit
in IC_DATA_CMD register to indicate whether the data present in IC_DATA_CMD register is 
first data byte after the address phase of a receive transfer.

Note: In the case when APB_DATA_WIDTH is set to 8, you must perform two
APB reads to the IC_DATA_CMD register to get status on bit 11.</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_AVOID_RX_FIFO_FLUSH_ON_TX_ABRT" configGroups="BasicConfig_AddFeatures" parameterId="IC_AVOID_RX_FIFO_FLUSH_ON_TX_ABRT" prompt="Avoid Rx FIFO Flush on Tranmsit Abort?" resolve="immediate" type="bit">
      <ipxact:name>IC_AVOID_RX_FIFO_FLUSH_ON_TX_ABRT</ipxact:name>
      <ipxact:description>This Parameter controls the Rx FIFO Flush during the Transmit Abort.
If this parameter is checked(1), only the Tx FIFO is flushed (not the Rx FIFO)
Flush on the Transmit Abort.
If this parameter is unchecked(0), both Tx FIFO and Rx FIFO are flushed on Transmit Abort.</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_BUS_CLEAR_FEATURE" configGroups="I2C_3_0_I2C_3_dot_0" parameterId="IC_BUS_CLEAR_FEATURE" prompt="Include Bus Clear feature?" resolve="immediate" type="bit">
      <ipxact:name>IC_BUS_CLEAR_FEATURE</ipxact:name>
      <ipxact:description>This parameter will enable the Bus clear feature for the DW_apb_i2c core.


If this parameter is set:
 - If an SDA line is stuck at low for IC_SDA_STUCK_LOW_TIMEOUT period of ic_clk, DW_apb_i2c master generates a master transmit abort (IC_TX_ABRT_SOURCE[17]: ABRT_SDA_STUCK_AT_LOW) to indicate SDA stuck at low.
User can enable the SDA_STUCK_RECOVERY_EN (IC_ENABLE[3]) register bit to recover the SDA by sending at most 9 SCL clocks.
If SDA line is recovered, then the master generates a STOP and auto clear the 'SDA_STUCK_RECOVERY_EN' register bit and resume the normal I2C transfers.
If an SDA line is not recovered, then the master auto clears the SDA_STUCK_RECOVERY_EN register bit and asserts the SDA_STUCK_NOT_RECOVERED (IC_STATUS[12]) status bit to indicate the SDA is not recovered after sending 9 SCL clocks which intimate the user for system reset.
 - If SCL line is stuck at low for IC_SCL_STUCK_LOW_TIMEOUT period of ic_clk, DW_apb_i2c Master will generate an SCL_STUCK_AT_LOW (IC_INTR_RAW_STATUS[14]) interrupt to intimate the user for system reset.</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="I2C_3_0_I2C_3_dot_0" parameterId="IC_SCL_STUCK_TIMEOUT_DEFAULT" prompt="Has SCL Stuck Timeout value of ?" resolve="immediate" type="bit">
      <ipxact:name>IC_SCL_STUCK_TIMEOUT_DEFAULT</ipxact:name>
      <ipxact:description>Default value of the IC_SCL_STUCK_LOW_TIMEOUT Register.</ipxact:description>
      <ipxact:value>'hffffffff</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="I2C_3_0_I2C_3_dot_0" parameterId="IC_SDA_STUCK_TIMEOUT_DEFAULT" prompt="Has SDA Stuck Timeout value of ?" resolve="immediate" type="bit">
      <ipxact:name>IC_SDA_STUCK_TIMEOUT_DEFAULT</ipxact:name>
      <ipxact:description>Default value of the IC_SDA_STUCK_LOW_TIMEOUT Register.</ipxact:description>
      <ipxact:value>'hffffffff</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_DEVICE_ID" configGroups="I2C_3_0_I2C_3_dot_0" parameterId="IC_DEVICE_ID" prompt="Enable DEVICE-ID feature?" resolve="immediate" type="bit">
      <ipxact:name>IC_DEVICE_ID</ipxact:name>
      <ipxact:description>If this Parameter is enabled, the DW_apb_i2c slave includes a 24-bit 
IC_DEVICE_ID Register to store the value of
Device-ID and transmits whenever master is requested.

The Master mode includes a DEVICE_ID bit 13 in IC_TAR register to initiate
the Device ID read for a particular slave address mentioned in IC_TAR[6:0]
register.</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="I2C_3_0_I2C_3_dot_0" parameterId="IC_DEVICE_ID_VALUE" prompt="Has I2C Slave DEVICE ID value of?" resolve="immediate" type="bit">
      <ipxact:name>IC_DEVICE_ID_VALUE</ipxact:name>
      <ipxact:description>Device ID Value of the I2C Slave stored in the IC_DEVICE_ID Register (24 bit, MSB is transferred first
on the Device ID read from the master).</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="SMBus_PMBus_Smbus_mode" parameterId="IC_SMBUS_CLK_LOW_SEXT_DEFAULT" prompt="Has SMBus clock low Slave extend default Timeout value of ?" resolve="immediate" type="bit">
      <ipxact:name>IC_SMBUS_CLK_LOW_SEXT_DEFAULT</ipxact:name>
      <ipxact:description>Default value of the IC_SMBUS_CLK_LOW_SEXT Register.</ipxact:description>
      <ipxact:value>'hffffffff</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="SMBus_PMBus_Smbus_mode" parameterId="IC_SMBUS_CLK_LOW_MEXT_DEFAULT" prompt="Has SMBus clock low Master extend default Timeout value of ?" resolve="immediate" type="bit">
      <ipxact:name>IC_SMBUS_CLK_LOW_MEXT_DEFAULT</ipxact:name>
      <ipxact:description>Default value of the IC_SMBUS_CLK_LOW_MEXT Register.</ipxact:description>
      <ipxact:value>'hffffffff</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="SMBus_PMBus_Smbus_mode" parameterId="IC_SMBUS_RST_IDLE_CNT_DEFAULT" prompt="Has SMBus Thigh:Max Idle count Value of ?" resolve="immediate" type="bit">
      <ipxact:name>IC_SMBUS_RST_IDLE_CNT_DEFAULT</ipxact:name>
      <ipxact:description>Default value of the IC_SMBUS_THIGH_MAX_IDLE_COUNT Register.</ipxact:description>
      <ipxact:value>'hffff</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_SMBUS_SUSPEND_ALERT" configGroups="SMBus_PMBus_Smbus_mode" parameterId="IC_SMBUS_SUSPEND_ALERT" prompt="Enable SMBus Optional Signals?" resolve="immediate" type="bit">
      <ipxact:name>IC_SMBUS_SUSPEND_ALERT</ipxact:name>
      <ipxact:description>This parameter controls whether DW_apb_i2c includes 
Optional SMBus Suspend and Alert signals on the interface.</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_OPTIONAL_SAR" configGroups="SMBus_PMBus_Smbus_mode" parameterId="IC_OPTIONAL_SAR" prompt="Include Optional slave address register?" resolve="immediate" type="bit">
      <ipxact:name>IC_OPTIONAL_SAR</ipxact:name>
      <ipxact:description>This parameter controls whether to include optional 
Slave Address Register in SMBus Mode.</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="SMBus_PMBus_Smbus_mode" parameterId="IC_OPTIONAL_SAR_DEFAULT" prompt="Has I2C default optional slave address of?" resolve="immediate" type="bit">
      <ipxact:name>IC_OPTIONAL_SAR_DEFAULT</ipxact:name>
      <ipxact:description>Controls whether to include Optional Slave Address Register in
SMBus Mode. A user is not allowed to assign any reserved 
addresses. The reserved address are as follows:

0x00 0x01 0x02 0x03 0x04 0x05 0x06 0x07

0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="SMBus_PMBus_Smbus_mode" parameterId="IC_SMBUS_ARP" prompt="Enable Address Resolution Protocol in SMBus Mode?" resolve="immediate" type="bit">
      <ipxact:name>IC_SMBUS_ARP</ipxact:name>
      <ipxact:description>Controls whether DW_apb_i2c includes logic to detect and
respond ARP commands in Slave mode. It also includes logic to
generate/validate the PEC byte at the end of the transfer in 
Slave mode only.</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="SMBus_PMBus_Smbus_mode" parameterId="IC_SMBUS_UDID_HC" prompt="SMBus Unique Device Identifier (UDID) Hardcode?" resolve="immediate" type="bit">
      <ipxact:name>IC_SMBUS_UDID_HC</ipxact:name>
      <ipxact:description>Controls whether Unique Device Identifier (UDID) used for Dynamic
Address Resolution process in SMBus ARP Mode is Hardcoded 
(Upper 96-bits) or Complete UDID is Software Programmable.</ipxact:description>
      <ipxact:value>'h1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="SMBus_PMBus_Smbus_mode" parameterId="IC_SMBUS_UDID_MSB" prompt="Has SMBUS Unique device identifier (MSB 96 bits) value of?" resolve="immediate" type="bit">
      <ipxact:name>IC_SMBUS_UDID_MSB</ipxact:name>
      <ipxact:description>If the parameter IC_SMBUS_UDID_HC is 1, stores the Static Unique 
Device Identifier used for Dynamic Address Resolution process in 
SMBus ARP Mode (Upper 96bits of UDID).
If the parameter IC_SMBUS_UDID_HC is 0, then this field is used as the
default value of the upper 96bits of the UDID Registers
{IC_SMBUS_UDID_WORD3, IC_SMBUS_UDID_WORD2, IC_SMBUS_UDID_WORD1}</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="SMBus_PMBus_Smbus_mode" parameterId="IC_SMBUS_UDID_LSB_DEFAULT" prompt="Has Default SMBus Unique device identifier (LSB 32 bits) value of?" resolve="immediate" type="bit">
      <ipxact:name>IC_SMBUS_UDID_LSB_DEFAULT</ipxact:name>
      <ipxact:description>If the parameter IC_SMBUS_UDID_HC is 1, specifies default value of 
the IC_SMBUS_UDID_LSB register used for Dynamic Address Resolution 
process in SMBus ARP mode (Lower 32bits of UDID).
If the parameter IC_SMBUS_UDID_HC is 0, specifies default value of 
the IC_SMBUS_UDID_WORD0 register used for Dynamic Address Resolution 
process in SMBus ARP mode (Lower 32bits of UDID).</ipxact:description>
      <ipxact:value>'hffffffff</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="IC_PERSISTANT_SLV_ADDR_DEFAULT" configGroups="SMBus_PMBus_Smbus_mode" parameterId="IC_PERSISTANT_SLV_ADDR_DEFAULT" prompt="Has Default Persistent Slave Address register bit Value of ?" resolve="immediate" type="bit">
      <ipxact:name>IC_PERSISTANT_SLV_ADDR_DEFAULT</ipxact:name>
      <ipxact:description>Default value of the Persistent Slave Address register bit in IC_CON Register.</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="I2C_6_0_I2C_6_dot_0" parameterId="IC_UFM_SCL_HIGH_COUNT" prompt="Ultra Fast speed SCL high count is?" resolve="immediate" type="bit">
      <ipxact:name>IC_UFM_SCL_HIGH_COUNT</ipxact:name>
      <ipxact:description>Reset value of Ultra-Fast Speed I2C Clock SCL High Count register (IC_UFM_SCL_HCNT). 
The value must be calculated based on the I2C data rate desired and I2C clock frequency.
When parameter IC_USE_COUNTS = 0, this parameter is automatically calculated using the IC_CLOCK_PERIOD parameter.</ipxact:description>
      <ipxact:value>'h0006</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="I2C_6_0_I2C_6_dot_0" parameterId="IC_UFM_SCL_LOW_COUNT" prompt="Ultra Fast speed SCL low count is?" resolve="immediate" type="bit">
      <ipxact:name>IC_UFM_SCL_LOW_COUNT</ipxact:name>
      <ipxact:description>Reset value of Ultra-Fast Speed I2C Clock SCL Low Count register (IC_UFM_SCL_LCNT). 
The value must be calculated based on the I2C data rate desired and I2C clock frequency.
When parameter IC_USE_COUNTS = 0, this parameter is automatically calculated using the IC_CLOCK_PERIOD parameter.</ipxact:description>
      <ipxact:value>'h0008</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="I2C_6_0_I2C_6_dot_0" parameterId="IC_UFM_TBUF_CNT_DEFAULT" prompt="Has Ultra Fast mode tBuf count Value of ?" resolve="immediate" type="bit">
      <ipxact:name>IC_UFM_TBUF_CNT_DEFAULT</ipxact:name>
      <ipxact:description>Default value of the IC_UFM_TBUF_CNT Register. This parameter is active when the IC_USE_COUNTS and
IC_ULTRA_FAST_MODE parameters are checked (1); otherwise, this value is automatically calculated 
using the IC_CLK_PERIOD parameter.</ipxact:description>
      <ipxact:value>'h8</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="BasicConfig_SpikeSuppression" parameterId="IC_DEFAULT_FS_SPKLEN" prompt="Maximum length (in ic_clk cycles) of suppressed spikes in Standard Mode, Fast Mode, and Fast Mode Plus" resolve="immediate" type="bit">
      <ipxact:name>IC_DEFAULT_FS_SPKLEN</ipxact:name>
      <ipxact:description>Reset value of maximum suppressed spike length register in 
Standard Mode, Fast Mode, and Fast Mode Plus modes (IC_FS_SPKLEN Register).
Spike length is expressed in ic_clk cycles and this value is calculated based
on the value of IC_CLOCK_PERIOD.</ipxact:description>
      <ipxact:value>'h5</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="BasicConfig_SpikeSuppression" parameterId="IC_DEFAULT_HS_SPKLEN" prompt="Maximum length (in ic_clk cycles) of suppressed spikes in HS mode" resolve="immediate" type="bit">
      <ipxact:name>IC_DEFAULT_HS_SPKLEN</ipxact:name>
      <ipxact:description>Reset value of maximum suppressed spike length register in HS modes (Register IC_HS_SPKLEN).
Spike length is expressed in ic_clk cycles and this value is calculated based on the value
of IC_CLOCK_PERIOD.</ipxact:description>
      <ipxact:value>'h1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="I2C_6_0_I2C_6_dot_0" parameterId="IC_DEFAULT_UFM_SPKLEN" prompt="Maximum length (in ic_clk cycles) of suppressed spikes in Ultra Fast mode" resolve="immediate" type="bit">
      <ipxact:name>IC_DEFAULT_UFM_SPKLEN</ipxact:name>
      <ipxact:description>Reset value of maximum suppressed spike length register in Ultra-Fast Mode (IC_UFM_SPKLEN Register).
Spike length is expressed in ic_clk cycles and this value is calculated based on the value of IC_CLOCK_PERIOD.</ipxact:description>
      <ipxact:value>'h1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="REG_TIMEOUT_WIDTH" configGroups="BasicConfig_systemConfig" parameterId="REG_TIMEOUT_WIDTH" prompt="Width of Register timeout counter" resolve="immediate" type="longint">
      <ipxact:name>REG_TIMEOUT_WIDTH</ipxact:name>
      <ipxact:description>Defines the width of Register timeout counter. If set to zero,
the timeout counter register is disabled, and timeout is triggered
as soon as the transaction tries to read an empty RX_FIFO or write
to a full TX_FIFO. As these are the only cases where PREADY signal
goes low , it ensures that PREADY is tied high throughout. Setting
values from 4 through 32 for this parameter configures the timeout
period from 2^4 to 2^8 pclk cycles.</ipxact:description>
      <ipxact:value>4</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="HC_REG_TIMEOUT_VALUE" configGroups="BasicConfig_systemConfig" maximum="1" minimum="0" parameterId="HC_REG_TIMEOUT_VALUE" prompt="Hardcode Register timeout counter value" resolve="immediate" type="longint">
      <ipxact:name>HC_REG_TIMEOUT_VALUE</ipxact:name>
      <ipxact:description>Checking this parameter makes Register timeout counter a read-only register.
The register can be programmed by user if the hardcode option is turned off.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="BasicConfig_systemConfig" maximum="15" minimum="1" parameterId="REG_TIMEOUT_VALUE" prompt="Register Timeout counter default value" resolve="immediate" type="longint">
      <ipxact:name>REG_TIMEOUT_VALUE</ipxact:name>
      <ipxact:description>Defines the reset value of Register timeout counter register. This value can
be over - ridden by programming the timeout counter register before
enabling the component , if the HC_REG_TIMEOUT_VALUE is left un-checked</ipxact:description>
      <ipxact:value>8</ipxact:value>
    </ipxact:parameter>
  </ipxact:parameters>
  <ipxact:vendorExtensions>
    <snps:component>
      <snps:checksum>VzIvnzZiBrq7HpclRfqHyg==</snps:checksum>
    </snps:component>
  </ipxact:vendorExtensions>
</ipxact:component>

